# React 
-> It is a JS library for creating UI 
-> react.dev is the official page of react
-> React lets you build user interfaces out of individual pieces called components. Create your own React components like Thumbnail, LikeButton, and Video. Then combine them into entire screens, pages, and apps.
-> A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.
-> React is about building a component once and then reusing it whenever it is needed.
-> In react we write code in jsx format.
-> JSX is a way of writing html inside our JS .

# JSX 
-> JavaScript Extension syntax 
-> It lets us write HTML directly inside JS .
-> It is not a pure JS code when we write JSX code in react it gets internally converted/transpiled into JS and it is done by Babel.
->  JSX----->Babel------>JS
-> Bable is a JS compiler.

# Set up local Environment 
-> Create-React-App v/s Vite 
syntax: npm create vite@latest 
        npm run dev  // to start the server

# Understanding our App
-> src folder : we write our main logic inside the source folder.
// Inside src folder there is a assets folder which is also empty.
// App.jsx : app is a component we get to see app component inside every react app. Home page is our app component.
// App.css : this has the css written for our app.jsx file.
-> index.html : It is our main page that opens when we start our react app.
// Inside this html file there is a div called root our whole component get rendered inside this root element.
// There is a script tag that has the src as main.jsx and inside this file we are accesssing the root div and rendering our app component .

## Flow is like this : 
-> We have a index.html file that has a root div which treats main.jsx as a script main.jsx work is to render the app component inside the root div.
-> Where app is our component that comes from app.jsx.
-> These three are only our main files .The main work is done using these three files.

# Re-write our app 
import "./App.css";

function App() {
        return <h1>Hello world!</h1>
}

export default App;

# Our 1st component 
-> Component is a reusable & independent piece of code. 
-> The highest level of component is our app component. Other components are embedded inside this app component.
-> Syntax: function CommponentName() {
        return(html element that we want to return );
}
## We can only return 1 html element .
// Creating a component
function Title() {
        return(
                <h1>Hello world!</h1>
        );
}

-> For rendering a component we write it like a html tag.
// Rendering a component 
<Title></Title>  OR  <Title/>

// We can return multiple elements by grouping them inside a div.
Eg:
function App() {
   return(
    <div>
      <h1>This is my app component</h1>
      <p>Inside app component we have : </p>
      <Title></Title>
    </div>
   )
}

# NOTE : Generally we don't write all the components inside the app.jsx each component has its own file .
Eg: Title.jsx file will have the title component . It is created inside the src folder.
-> We export Title.jsx component and import it to use in our App.jsx

# Import - Export 
-> In summary named exports are useful when you want to export multiple values and import them with their specific names, while default exports are handy for exporting a single value and giving it a custom name when importing .
-> The choice between the two depends on the structure and requirements of your codebase.
-> Import 
// import Title from "./Title.jsx";
-> Default export 
// export default Title;
-> Named Export 
// export { Title };
// import { Title } from "./Title.jsx";

# Writing Markup in JSX 
-> Return a single root element 
   // To return multiple elements from a component wrap them with a single parent tag.
   Eg:
     function App() {
         return(
            <div>
                <h1>This is my app component</h1>
                <p>Inside app component we have : </p>
               <Title></Title>
           </div>
   )
}

-> Close all the tags

-> camelCase most of the things 
   // Attributes name are written in camelCase 
   Eg: className , backgroundColor

# React Fragments 
-> Fragments let you group a list of children without adding extra nodes to the DOM .
Eg: 
function App() {
        return(
                <>
                <Title></Title>
                <Title></Title>
                <Title></Title>
                </>
        );
}

# JSX with curly braces 
-> In JSX wherever we write any code inside curly braces that code is treated as pure JS.
-> Curly braces opens a small window to JS.
function Title() {
        return <p> 2*2 = {2*2}</p>;
}

function Title() {
        let msg = "Hello world!";
        return <p>Message says {msg}</p>;
}

# Sturcturing Components 
-> First we have to break down a website into its smallest component and then we build website from the smallest componet to the full website by building components.
-> For example suppose we have a Product component we have 3 Product then we will group them inside a ProductTab component and then use it in our app.jsx
-> This increase the reusability.

# Style Components 
-> There are multiple ways to style a component .
-> There are various styling tools that we can use we will talk about it later. 
-> We can add the styling directly into the index.css file or we can seperately write the css for each component and then use it by importing.
-> Like App component ki styling App.css me likhi jaayegi Product component ki product.css me likhi jaayegi. We prefer using this method of styling.
-> The name of the css file is same as the component name .
-> The className of the component should also be same as component name.
import "./Product.css";

export default function Product() {
        return(
                <div className="Product">
                   <h4>Product Title</h4>
                   <p>Product Description</p>
                </div>
        );
}

// Product.css 
.Product{
        border: 1px solid black;
        margin-bottom: 5px;
        border-radius: 14px;
}

NOTE: Webpack makes the import export functionality possible in React.

# React Props 
-> Props are the information that you pass to a JSX tag.
Eg: <Product title="phone" price="30k" />
    <Product title="laptop" price={40000}/>
// If we want to pass number then we have to put it inside {} for string we will put it inside "" .

    export default function Product({ title, price =1}) {
        return(
                <div className="Product">
                   <h4>{title}</h4>
                   <p>{price}</p>
                </div>
        )
    }
// We can also asign the default value to the parameter .

# Passing arrays to props 
-> features={["fast", "reliable"]} //array
-> features={{ a: "fast", b: "reliable" }} //object
// How to access 
<p>{features}</p> //accessing array
<p>{features2.b}</p>  //accessing object

# Rendering Arrays 
// Approach 1 
let options =[<li>"hi-tech"</li>, <li>"durable"</li>, <li>"fast"</li>];

<Product title="iPhone" price="50k" features={options} features2={{ a: "hi-tech", b: "durable", c: "fast"}}></Product>
-> In this approach we will create each element as a list item in an array and then we send it as props.

// Approach 2 (mostly used)

    return(
        <div className="Product">
            <h3>{title}</h3>
            <h5>Price: {price}</h5>
            <p>{ features.map((feature) => <li>{feature}</li>)}</p>
            <p>{features2.b}</p>
        </div>
    );
-> Another way is that we map each feature and make it a list item like above.

# Conditionals 
-> Adding elements on the basis of some Conditionals
Eg:
   {price >= 10000 ? <p>Discount : 5%</p> : null}
   // This will create the <P> tag for only the component whose price is >=10000 .

   // We can also write like this if the condition will be true then only the discount will be given
   {price >= 10000 && <p>Discount : 5%</p>}

# Dynamic Component Styling 
-> When we want to add some styling based on the condition then it is known as dynamic component styling and conditional component styling as well.
Eg: 
let isDiscount = price > 30000;
    let styles = {backgroundColor : isDiscount ? "yellow" : ""};
    return(
        <div className="Product" style={styles}>
            <h3>{title}</h3>
            <h5>Price: {price}</h5>
            {isDiscount ? <p>"Discount of 5%"</p> : null}
        </div>
    );

# Install React Developer Tools 
-> React Developer tools are helpfull when you are developing with the react add the chrome extension of react developer tools .

# Event in React 
## Handling click events 
function doSomething(){
        console.log("Button was clicked");
}

export default function Button(){
        retrun (
                <div>
                <button onClick={doSomething}>Click Me!</button>
                </div>
        );
}

## Handling non-clicking events
function  handleHover(){
        console.log("hover");
}

export default function Button(){
        return (
                <div>
                   <button onMouseOver={handleHover}>Hover over me!</button>
                </div>
        );
}

# Event Object 
-> We can access the event object in handler 
Eg:
function handleFormSubmit(event){
        event.preventDefault();
        console.log("Form was submitted");
}

export default function Form(){
        return (
                <form onSubmit={handleFormSubmit}>
                <button>Submit</button>
                </form>
        );
}
// preventDefault() prevents us from the default behaviour in forms.

# State in react 
-> The state is a built-in react object that is used to contain data or information about the component.
-> A component's state can change over time; whenever it changes, the component re-renders.

# Hooks 
-> Hooks were a new addition in React 16.8
-> They let you use state and other React features without writing a class.

# useState()
-> useState is a react hook that lets you add a state variable to your component.
Eg: const [state, setState] = useState(intialState);
// Here setState is an updater function

useState returns an array with exactly two values:
1. The current state.During the first render,it will match the initialState you have passed .
2. The set function that lets you update the state to a different value and trigger a re-render.

# Closure 
-> A closure is a feature in javascript wherre an inner function haas access to the outer(enclosing) function's variables.
Eg: 
function outer(){
        var b = 10;
        function inner(){
                var a =20;
                console.log(a+b);
        }
        return inner;
}
// In JS once a function completes its execution any variables that were defined inside the function scope cease to exist.

# How does re-render works?
-> As soon as the setState function is called whole component is re-rendered.

# Callback in updater function
## How to change state when it depends on the current value
-> Updater function are async function so we use callback when we want to use it more than once .
Eg:
// We use this when the new/updated value depends on the previous/old value.
export default function Counter(){
    let [count, setCount] = useState(0);

    let incCount = () =>{
        setCount((currCount)=>{
            return currCount + 1;
        });
        setCount((currCount)=>{
            return currCount + 1;
        });
        console.log(count);
    };
}
// This will increase the counter by 2 because we have use the callback for the updater function. 
// If we don't use callback then the count will increase by 1 only once the increase count button is clicked. 
// when it doesn't depend on the any value depends on any random value.Then we don't use callback
Eg: setCount(35);

# More about state 
-> React re-renders a component only when it detects a change in the value of the state.
-> We can pass function as initialState to the useState()

# Object and State
-> To create an object we have to spread it in order to pass its updated value .
-> When we spread it copy of the object with the updated value is send which help them to detect the change in the state hence it re-renders the component.

# Lottery Game
-> We are given lottery tickets with a 3 digit number 
-> The number is generated randomly 
-> If the sum of all digits is 15 , we win the lottery and get the prize.

# Changes to lottery game 
-> Make the lottery tickets of N digit number 
-> The winning sum could be any feasible number.

-> So we are going to create state variable ticket in the lottery component and then we pass it down the heirarchy to use it   in ticket and ticketNum component.

# Lifting state up 
-> In this we send our state up in heirarchy so high that all our requirements are fulfilled.

# Component types 
-> We have basically two types of components 
1.> Logical components 
-> Also known as smart components.
-> Have state variable.
-> Change in state takes place.

2.> Presentational components 
-> Also known as dumb components.
-> Its prime goal is to design UI.
-> Have no state variable.

# Ticket component 
## TicketNum 
   Props: num 
   State: none 
   Events: none

## Ticket component
   Props: ticket[] of size n 
   State: none
   Events: none

## Lottery component(Logical component)
   Props: n,winningSum 
   State: ticket[]
   Events: buyTicket()

# Functions as props 
## JS functions are 1st class objects 
-> This means they can be passed to a function as argument, returned from it and assigned to a variable. 
Eg:  let winCondition = (ticket) => {
    return sum(ticket) === 15;
  }

  <Lottery n={3}  winCondition={winCondition}></Lottery>

# Forms in react 
-> The standard way with forms is to use controlled components.So we make react state to be the "single source of truth".

//React old docs
-> In HTML form elements such as <input>,<textarea> and <select> typically maintain their own state and update it based on user input. In react mutable stae is typically kept in the state property of components, and only updated with setState().
-> We can combine the wo by making the react state be the "single source of truth". Then the react component that renders a form also controls what happens in that form on subseqent user input. An input form element whose value is controlled by react in this way is called a "controlled component".

# Form labels
<form>
        <label htmlFor="username">Fullname</label>
        <input placeholder="enter full name" type="text" value={fullName} onChange={handleNameChange} id="username"></input>
        <button>Submit</button>
</form>
-> Here we use htlmFor and write the id of the element for which we want that label to be used and then we will get the label.

# Hndling multiple inputs 
-> Whenever we have multiple inputs we use a common handler[handleInputChange()] to handle all the inputs.
-> We create a common handleInputChange() for all elements.
event.target.name   //changed field 
event.target.value  //new value of the field 
Eg: 
let [formData, setFormData] = useState({
        fullName: "",
        username: "",
        password: ""
    }); //State Variable


let handleInputChange = (event) =>{
        let fieldName = event.target.name;
        let newValue = event.target.value;
        console.log(newValue);
        setFormData((currData) => {
            return {...currData,[fieldName]: newValue};
        });
      };

# Form Validatios
-> Forms have default validation that is done by default by the browser.
-> Formik : it is used for the form validation 
// npm install formik 
 
# useEffect()
-> useEffect(setUp, dependencies?) //dependencies is optional.
-> The effect hook lets you perform side effects in function components.
-> Data fetching, setting up a subscription, and manually changing the DOM in react components are all examples of side effects.
Eg: 
import { useState, useEffect } from "react";
export default function Counter() {
        let [count, setCount] = useState(0);
        const incCount = () =>{
                setCount((currCount) => currCount +1);
        };

        useEffect(function sideEffect(){
                console.log("This is the side effect");
        });

        return (
                <div>
                 <h1>Count= {count}</h1>
                 <button onClick={incCount}>+1</button>
                </div>
        );
}

-> So whenever the counter component is re rendered then the useEffect function sideEffect will be executed. 

# Dependencies 
-> Dependencies are nothing but state variables.
Eg: 
 let [countx, setCountx] = useState(0);
    let [county, setCounty] = useState(0);

    let incCountx = () =>{
        setCountx((currCount) => currCount +1);
    };

    let incCounty = () =>{
        setCounty((currCount) => currCount +1);
    };

useEffect(function sideEffect(){
        console.log("This is the side effect");
    },[countx]);
    // here the sideEffect will now only be executed when the countx is changed.
-> In dependencies we have two cases :
Case 1:  In this we pass array of state variables
Eg: [s1,s2,s3];

Case 2: In this we pass an empty array
Eg: [ ] // This means that when our component is rendered first time then only sideEffect will occur.
// Re-render ke case me humara function execute nahi krr pata.

# Use Cases 
-> API Calls - Asynchronous Operations
study about it in Joker.jsx
-> In this we have learnt how to practically use useEffect and how to use API fetch in react.

