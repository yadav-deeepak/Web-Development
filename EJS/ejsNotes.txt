// EJS(Embedded JavaScript Templates)
# Templating 
-> EJS(Embedded JavaScript Templates)
-> EJS is a simple templating language that lets you  genrerate HTML markup with plain JavaScript.
-> Whenever similar layouts are used in multiple pages the we simply create the template of the page and render the information in it.
-> Install EJS : npm i ejs 

# Using EJS 
-> app.set("view engine","ejs"); //This will set the view engine as EJS

app.get("/",(req,res)=>{
    res.render("home.ejs"); // this will render the home.ejs page when the get request is made on the home page.
});

-> Using ejs we don't send responses we render responses.
-> We use res.render to render changes and we render home.ejs file .
-> We need to create a "views" folder in our EJS folder because view engine expects that all our templates should be present in the "views" folder.
-> If we want we can set the name as something else but we use the default name(views).
-> To create ejs template we save the file with .ejs extension.
Eg: home.ejs . 
//We will create a mix code of html and js in this home.ejs file.

# How does res.render will know where the file is ?
-> When the code is excuted then by default express will send the views folder and inside it , it will search for home.ejs folder.

Note: If we start our server from any other directory then we will get error because express will search for the views folder in the directory from which the server has been started .
-> To solve this :
-> we need to require the path package and then set the views path .
Eg: // index.js
const path = require("path");
app.set("views", path.join(__dirname,"/views"));


# Views Directory 
-> const path = require("path");
app.set("views", path.join(__dirname,"/views"));
// __dirname this includes the path of the index.js i.e; MERN/EJS/

-> We are adding the views path in it .
MERN/EJS/views using path.join we are joining these two and we are telling express the exact path of our views folder.

# Interpolation Syntax 
-> Interpolation refers to embedding expessions into marked up text.
-> Using EJS we are going to make our code dynamic.

# EJS tags
-> <% 'Scriptlet' tag, for control-flow, no output
-> <%_ ‘Whitespace Slurping’ Scriptlet tag, strips all whitespace before it
-> <%= Outputs the value into the template (HTML escaped)
-> <%- Outputs the unescaped value into the template
-> <%# Comment tag, no execution, no output
-> <%% Outputs a literal '<%'
-> %> Plain ending tag
-> -%> Trim-mode ('newline slurp') tag, trims following newline
-> _%> ‘Whitespace Slurping’ ending tag, removes all whitespace after it

# Passing data to EJS 
Eg:
app.get("/rolldice",(req,res) =>{
    let num = Math.floor(Math.random()*6)+1;
    res.render("rolldice.ejs",{ diceVal: num });
});
//rolldice.ejs 
<h1>Your dice gave value: <%= diceVal %></h1>
-> Here we are passing the value as a second parameter to res.render and we are passing it in the form of { key: value }
-> We are adding it to our rolldice.ejs page using <%= key %>.

# How to use conditional statements in EJS 
// Adding conditions inside EJS 
-> Eg:
<% if(diceVal == 6){ %>
<h2>Nice! Roll dice again.</h2>
<% } %>
// Here if the value of dice will be 6 then only this <h2> statement will be printed else not.

# How to use loops in EJS?
-> Eg:
<% for(user of followers) { %>
<li><%= users %>
<% } %>  
followers =["adam","Viper","Suraj","Harsh"]; // this followers are passed in index.js  while working on a website we will get it from the database. 

# Serving static files 
-> Along with the html there are also some of the static files that are to be send such as css and js files.
-> To serve these static files we should have a "public" named folder .
// We can use another name for the folder but for that we have to use some functions.
-> app.use(express.static( folder_name ))
// Here we are using a middleware.
Eg: app.use(express.static("public")); //if we start server from the same directory in which public folder is present we can use it .
-> Now we can use style.css file we just have to link it to our insta.ejs file 
Eg: <link rel="stylesheet" href="/style.css">
// Normally to link the css file we have to mention its full path but here because we have alerady defined the directory for the static file so we don't need that we just have to write /style.css it will automatically search it in the public folder.
app.use(express.static(path.join(__dirname, "public"))); // If we start the server from any directory then we will use this.
-> Here the public folder is serving the files to the insta.ejs page.

// Suppose if we have more folders inside our public directory then we will give both folder to serve.
Eg: Suppose we have css and js directory in our public directory.
app.use(express.static(path.join(__dirname, "public/css")));
app.use(express.static(path.join(__dirname, "public/js")));

# Includes 
-> It is a way of creating the sub templates.
<%- include("includes/head.ejs"); %> 
->Includes are relative to the template with the include call. (This requires the 'filename' option.) For example if you have "./views/users.ejs" and "./views/user/show.ejs" you would use <%- include('user/show'); %>.
-> Create an includes folder in the view directory and then inside it create the files that u want to include.