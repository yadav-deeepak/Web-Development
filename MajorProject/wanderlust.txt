# Getting Started 
-> Database Setup 
-> REST Apis for CRUD 

# Model: Listing 
-> title 
-> description
-> image 
-> price 
-> location 
-> country

# Initialize Database 

# INDEX ROUTE 
-> GET  /listings  // all listings

# SHOW ROUTE : READ
-> GET  /listings/:id   //specific listing data view
<%= listing.price.toLocaleString("en-IN") %> 
// Here toLocaleString("en-IN") This function is used to display the price with commas accorrding to indian standards.

# NEW & CREATE ROUTE : CREATE
-> GET  /listings/new   //we will get a form 
-> POST  /listing   //when form is submitted then it will  send a post req which will create a new list.

<input name="Listing[title]" placeholder="Enter title" type="text">
// We can either write like this in this a listing object will be created which will have title as key and the input value as pair.This will reduce the code we have to write in our app.js.
let newListing = new Listing(req.body.listing);
   await newListing.save();
                OR
let {title, description, image, price, country, location} = req.body;

# Edit & Update Route : Update 
-> GET   /listings/:id/edit    //edit form 
// when the form is submitted 
-> PUT  /listings/:id  

# DELETE ROUTE 
-> DLETE  /listings/:id

# Adding styling 
## What is EJS Mate?
-> This will also helps us in creating templates/layouts.
-> Using this we create a boilerplate once and then we add the body inside it from other listings
 <%- body %> //write this in the to import body from other templates.
 <% layout("/layouts/boilerplate.ejs") %> // use this in the templates to add the boilerplate code .

# Creating NavBar 
-> includes/navbar.ejs
-> Used bootstrap for creating the navbar 

# Footer 
-> includes/footer.ejs

# Form validations 
-> When we enter data in the form ,the browser and/or the web server will check to see that the data is in the correct format and within the constraints set by the application.
-> It can be of 2 types:
// Client side - forntend se backend ko jo data bheja jaa rha h vo proper format me hona chahiye.
// Server side - Database ke rules aur uske schema ke hisaab se data store ho rha h ki nahi aur error handling ye ensure krte h server side validation me.

# Success and failure text
-> Success text will be shown when we have filled all the fields correctly.
-> Failure text will be shown when validation fails.

# Server side error handling 
## Custom Error Handler
-> We will create a custom error handler to handle the errors (validation errors etc).

# Custom wrapAsync 