# Getting Started 
-> Database Setup 
-> REST Apis for CRUD 

# Model: Listing 
-> title 
-> description
-> image 
-> price 
-> location 
-> country

# Initialize Database 

# INDEX ROUTE 
-> GET  /listings  // all listings

# SHOW ROUTE : READ
-> GET  /listings/:id   //specific listing data view
<%= listing.price.toLocaleString("en-IN") %> 
// Here toLocaleString("en-IN") This function is used to display the price with commas accorrding to indian standards.

# NEW & CREATE ROUTE : CREATE
-> GET  /listings/new   //we will get a form 
-> POST  /listing   //when form is submitted then it will  send a post req which will create a new list.

<input name="Listing[title]" placeholder="Enter title" type="text">
// We can either write like this in this a listing object will be created which will have title as key and the input value as pair.This will reduce the code we have to write in our app.js.
let newListing = new Listing(req.body.listing);
   await newListing.save();
                OR
let {title, description, image, price, country, location} = req.body;

# Edit & Update Route : Update 
-> GET   /listings/:id/edit    //edit form 
// when the form is submitted 
-> PUT  /listings/:id  

# DELETE ROUTE 
-> DLETE  /listings/:id

# Adding styling 
## What is EJS Mate?
-> This will also helps us in creating templates/layouts.
-> Using this we create a boilerplate once and then we add the body inside it from other listings
 <%- body %> //write this in the to import body from other templates.
 <% layout("/layouts/boilerplate.ejs") %> // use this in the templates to add the boilerplate code .

# Creating NavBar 
-> includes/navbar.ejs
-> Used bootstrap for creating the navbar 

# Footer 
-> includes/footer.ejs

# Form validations 
-> When we enter data in the form ,the browser and/or the web server will check to see that the data is in the correct format and within the constraints set by the application.
-> It can be of 2 types:
// Client side - forntend se backend ko jo data bheja jaa rha h vo proper format me hona chahiye.
// Server side - Database ke rules aur uske schema ke hisaab se data store ho rha h ki nahi aur error handling ye ensure krte h server side validation me.

# Success and failure text
-> Success text will be shown when we have filled all the fields correctly.
-> Failure text will be shown when validation fails.

# Server side error handling 
## Custom Error Handler
-> We will create a custom error handler to handle the errors (validation errors etc).

# Custom wrapAsync 

# Custom ExpressError

//app.all("*",(req, res, next) =>{
    next(new ExpressError(404,"Page not found"));
});
-> When none of the above routes matches then this route will be executed.
-> This route will generate error page not found for the routes that we have not been created.

# Error.ejs
-> We want that whenever error occurs it should be displayed to the user in a good way for that we will create a error.ejs page.

# Validation for schema
-> If user fills the certain field and leave some of the fields then also it will be accepted and that will be added in the new listing .
-> But we want to make sure that user pass some fields for sure for that we can check if user has filled the field before entering it to the new listings.
-> There are two ways to achieve this :
1.> Check for all the required field by writing an if statement.
But we can not write the if for each and every detail because it will take a lot of time so we use the second method.
2.> We will use joi : Joi is used to validate schema.
-> It is an npm package .It is used to validate schema .
-> The most powerful schema description language and data validator for JavaScript.

# How to use joi 
-> First install joi
// npm i joi 
-> Second require it 
// const joi = require("joi");
-> In third step we create schema this schema is used for server side validation.
Eg: // schema.js
const Joi = require('joi');

module.exports.listingSchema = Joi.object({
    listing : Joi.object({
        title: Joi.string().required(),
        description: Joi.string().required(),
        location: Joi.string().required(),
        country: Joi.string().required(),
        price: Joi.number().required().min(0),
        image: Joi.string().allow("",null)
    }).required()
});
// Require it and use it in app.js
//Create route
let result = listingSchema.validate(req.body);
        console.log(result);
        if(result.error){
            throw new ExpressError(400,result.error)
        }

# Validation for schema 
## Middleware 
-> To convert it into middleware we convert all the part related to joi in the form of a function
Eg: const validateListing = (req, res, next) => {
    let {error} = listingSchema.validate(req.body);
        if(error){
            let errMssg = error.details.map((el) => el.message).join(",");
            throw new ExpressError(400,errMssg)
        }
}
call validateListing where you want to validate listing.
Eg: app.post("/listings",validateListing,wrapAsync(async (req,res,next)=>{       
        const newListing = new Listing(req.body.listing);
        await newListing.save();
        res.redirect("/listings");    
}));

