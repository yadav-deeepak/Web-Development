# Middleware 
-> It is an intermediary .
// Request -----> Middlware ------> Response 
-> In express Middleware in express are functions that come into play after the server recieves the request and before the response is sent to the client.
-> Common middleware funcitons: 
   // methodOverride
   // bodyParser 
   // express.static 
   // express.urlencoded 
-> app.use(express.urlencoded({extended: true}));
-> app.use(express.static(path.join(__dirname,"/public")));

# Properties of middleware
-> Middleware can access req and res object
-> Chaining is also possible in middleware.
-> If middleware want it can stop the chaining by sending a response.
Eg: const express = require("express");
const app = express();
const port = 3000;

//middleware -> response send

app.get("/",(req,res)=>{
    res.send();
});
// If we send a req to "/" and there is a middleware present before the app.get is also sending a response then the response of the middleware will be sent 

# What do middlewares do ?
-> Middleware functions can perform the following tasks: 
   -> Execute any code.
   -> Make changes to the request and the response objects.
   -> End the request- response cycle.
   -> Call the next middleware function in the stack.

# Our first middleware 
// app.use(middleware)
Eg: app.use(()=>{
    console.log("Hi, I am a middleware");
});

// using req & res object in middleware
Eg: app.use((req,res)=>{
    console.log("Hi, Iam a middleware");
    res.send("Bye");
});

# Using next 
-> The next middleware function is commonly denoted by a variable named text .
Eg: app.use((req,res,next)=>{
    console.log('Time:',Date.now())
    next()
})
// If the current middlware function doesn't end the request-response cycle ,it must call next() to pass control to the next middleware function. 
-> Code written after next will also get executed .
Eg:app.use((req,res,next)=>{
    console.log("Hi , I'm 1st middleware");
    next();
    console.log("This is after next");
});
// first the first console.log mssg will be printed and then the next statement will execute the next middleware after that 2nd console.log mssg will be printed.
// But this is not a good way of writing code a good developer avoid writing code like this.

-> Middlewares are of various types 
1. Application middleware 
2. Router middleware 
3. Error handling middleware 
4. Built-in middleware 
## Middlewares will always get executed wheather the you have selected the right path or wrong path. 

# Creating a utility middleware 
## Logger 
-> We can use morgan for creating utility middleware .
-> Logger functions helps us to print the useful information on console.
-> Info related to  request such as request time ,response time ,hostname etc are printed/logged using logger.
-> app.use((req,res,next)=>{
    req.responseTime = new Date(Date.now()).toString();
    console.log(req.method, req.path, req.responseTime, req.hostname);
    next();
});
// We can also manipulate the request using middlewares
Eg: req.responseTime = new Date(Date.now()).toString();
//here we are manipulating the response time by ourself
## Generally we write middlewares in the starting of the code if we want to execute them for each and every request.
## If we place middleware in the last then as soon as it find the response it will send it and the req will not be able to reach the middleware.

# app.use Callback 
app.use("/random",(req,res,next)=>{
    console.log("I am only for randomcd )
})
// if we dont pass the path then app.use will be executed for each and every request but if we mention the path then it will be executed for that path only .
-> We can write our authentication part in the middleware .
-> For error 404 we can create a special middleware at the end of the page.
// 404 
app.use((req,res)=>{
    res.send("Page not found");
});
// This way we can use middlewares to handle errors and create a error handling middlewares.

# API token as query string
-> Let's create a middleware for an api that checks if the access token was passed in the query string or not. 
Eg: app.use("/api",(req,res,next)=>{
    let{token} = req.query;
    if (token === "giveaccess"){
        next();
    }
    res.send("Access denied");
});

app.get("/api",(req,res)=>{
    res.send("Data");
});
// so here if we pass the correct token value then only we will get the data else we will get access denied.

# Multiple Middlewares 
-> We can pass multiple middlewares in our app.get and app.post request .
Eg: const checkToken = (req,res,next)=>{
    let{token} = req.query;
    if (token === "giveaccess"){
        next();
    }
    res.send("Access denied");
};

app.get("/api", checkToken, (req,res)=>{
    res.send("Data");
});

# Handling Errors 
-> Express default error handler.
-> Express by default has fixed path through which errors gets handled.
Syntax: throw new Error("ERROR MESSAGE"); // Using this we will be able to throw the error message that we want to throw.
Eg: const checkToken = (req,res,next)=>{
    let{token} = req.query;
    if (token === "giveaccess"){
        next();
    }
    throw new Error("ACCESS DENIED");
};
// This will throw and error as ACCESS DENIED Whenever the token value is incorrect .

# Error Handlers 
// Custom (How to create a custom error handling middleware.)
-> Error handling middleware 
   -> Define error-handling middleware functions in the same way as other middleware functions, except error-handling functions have four arguments instead of three: (err, req, res, next).
   Eg: app.use((err,req,res,next)=>{
           console.log("-----ERROR-----");
           next(err);
         });
// If we want to pass the default express error then we have to pass it as a parameter to next(err).
// If we don't pass this as parameter then the default express error will not be executed.

# Custom error class 
class ExpressError extends Error {
    constructor(status,message) {
        super();
        this.status = status;
        this.message = message;
    }
}
// Default status and message 
app.use((err,req,res,next) =>{
    let {status = 500, message = "Some error occurred"} = err;
    res.status(status).send(message);
});
// Here status and message are set to some default value so in case the value are not passed then this message will be generated.

# Activity 
app.get("/admin",(req,res) =>{
    throw new ExpressError(403,"Access to admin is Forbidden");
});
// Here we have created a custom error handler which will send the error message with 403 code and message "Access to admin is Forbidden" whenever someone will try to access the admin route.

# Handling Async Errors 
// NEW -Show Route 
1.> id -> doesn't exist
app.get("/chats/:id", async(req,res,next)=>{
    let {id} = req.params;
    let chat = await Chat.findById(id);
    if(!chat){
         next(new ExpressError(404,"Chat not found or deleted"));
    }
    res.render("edit.ejs",{ chat });
});
// If we want to handle the asynchronous error then we have to pass the new ExpressError inside next() express will not by default call the next()

2.> Validation error
-> When rules and constraints that we have set are not followed then the validataion error occur.
Eg: app.get("/chats",async (req,res,next)=>{
    try{
        let chats = await Chat.find();
    // console.log(chats);
    res.render("index.ejs",{chats});
    }catch(err){
        next(err);
    }
    
});
// For validation error we use try and catch to handle errors.

# Using wrapAsync
-> Writing try catch again and again genrates a  bulky code.
-> For using try catch in a better way we use wrapAsync .
// Create a fucntion wrapAsync that takes a function (fn) as a argument and returns fuction as a result.
// The returned function has some parameters (req,res,next) and this function will execute the argument fucntion(fn) where we pass req,res,next as parameter with .catch(err) to catch the error.
// In this way we will define the combination of three functions.
Syntax: function wrapAsync(fn){
    return function(req, res, next){
        fn(req, res, next).catch((err)=> next(err));
    };
}
Eg: function asyncWrap (fn){
    return function (req, res, next){
        fn(req, res, next).catch((err)=> next(err));
    };
}
// Now we can remove try and catch and pass the function inside this asyncWrap to catch the error.
app.get("/chats/:id",asyncWrap(async (req,res,next)=>{   let {id} = req.params;
    let chat = await Chat.findById(id);
    if(!chat){
        next(new ExpressError(404,"Chat not found"));
    }
    res.render("edit.ejs",{ chat }); 
}));
// We pass the callback inside the asyncWrap().
-> So we dont need to use try and catch we will use asyncWrap() to wrap the callback.\

# Mongoose Errors 
-> We can find the name of the errors using err.name
Eg: const handleValidationErr = (err) =>{
    console.log("This was a validation error .Please follow rules.");
    console.dir(err.message);
    return err;
}

app.use((err,req,res,next)=>{
    console.log(err.name);
    if(err.name === "ValidationError"){
        err = handleValidationErr(err);
    }
    next(err);
});
// Here if the error occurred is a validation error then the handleValidationErr() will be executed that will handle the error.

