# Library v/s Framework 
-> Library : A library is a collection of pre written code that can be used to perform specifiic tasks.
Eg: axios 

-> Framework : A framework is a set of pre written code that provides a structure for developing software applications .
Eg: express 

# Express 
-> A Node.js web application framework that helps us to make web applications .
-> Express is a npm package that we install and use for server side programming.
-> It is used for server side programming.
-> Express has four major uses:
   1. listen for incoming requests.
   2. It parses data according to Node.js 
   3. Matches responses with routes.
   4. Helps in sending a suitable response.

# Getting started with Express 
-> Eg: const express = require ("express");
       const app = express();

       let port = 8080; 
       app.listen(port,()=>{
        console.log('app listening on port ${port}`);
       });
// Here when we run this code then server will start listening to the requests on the port 8080 continously to stop it we need to press ctrl+c in the terminal .

# How can we send request on this server ?
-> To send request on this server we need to open localhost:3000 on our browser.
Note -> Before sending request to the server make sure to start the server 
     -> Go to the directory in which your server file is present use node filename.js to run the port .
-> If we send request without starting the server then it will show the message site can't be reached.

# How to send respone to the server ?
# app.use 
-> Eg: app.use((req,res)=>{
    console.log("New incoming request");
});// app.use method is used to listen to all the requests.
-> Now when we restart our server and open the localhost:3000 then we can see the message written in our terminal 'New incoming request' now we know that requests are recieved .

# Sending responses 
-> Whenever we send a req to a browser we send http req which are in text based req.
-> Express converts/parses it to req object. This is the second work of express parsing the requests.
-> To send response we use response(res) object.
-> res.send([body]) : sends the http response.
-> The body parameter can be a Buffer object, a String, an object, Boolean, or an Array. For example:
    1. res.send(Buffer.from('whoop'))
    2. res.send({ some: 'json' })
    3. res.send('<p>some html</p>')
    4. res.status(404).send('Sorry, we cannot find that!')
    5. res.status(500).send({ error: 'something blew up' })
# Sending response Eg: We can send string ,object ,html etc as a response .
-> app.use((req,res)=>{
    console.log("request recieved");
    res.send("This is a basic response");
});

# Routing
-> Generally in website we have different different things available on different routes.
-> It is a process of selecting a path for traffic in a network or between or across multiple networks.
-> app.use work is to listen to all the requests.
-> Only single response can be send for a single path.
-> "/" represents the path of the home page.
Eg: app.get("/apple",(req,res)=>{
    res.send({
        name: "apple",
        color: "red",
    });
});

app.get("*",(req,res)=>{
    res.send("This path doesn't exist");
});//when all of the path doesn't match then this path will be executed.

# Solving Hoppscotch problem
-> If you are new to hoppscotch then you can't open localhost:3000 and see the response on the hoppscotch .
-> To solve this problem we have to go to the github link and install the google extension (Hoppscotch browser extension.) to solve this problem .
-> Refresh and select the intercepter option and set it to the third option then again refresh it this will solve the problem.

# Nodemon 
-> To automatically restart server with code changes.
npm install -g nodemon // install nodemon globally 
Run using nodemon: nodemon index.js 
-> We can run our file from any where we just have to metion the path 
Eg: nodemon EJS/index.js // this will run the index.js file in the EJS directory.

// How does requests work and custom pages are generated ? 
# Path Parameters 
## req.params 
-> req.params show the request parameters.
-> Whenever we use variables we use it as a path parameters 
-> app.get("/ig/:username",(req,res) => {
    let { usename } = req.params;
    res.send(`This account belongs to @${username}`);
});
-> We can also send multiple parameters .
Eg: app.get("/:username/:id" ,(req,res) => {
    console.log(res.params); 
});
-> If we send req http://localhost:3000/deepak/32  then we get output on console as // { username: 'deepak', id: '32' } value of id and username depends on the request.
-> We can also store it and use it in our code.
Eg: let { username ,id } = req.params;

# Query strings 
## req.query 
app.get("/search",(req,res) => {
    console.log(req.query);
    res.send("no results");
});
Request : http://localhost:3000/search?q=apple&color=green 
// Here q=apple&color=green  this is the query and we can group multiple queries using &.
-> The query we send with our request is get stored in the req.query and we can use it to access it or store it in a variable .
Eg: let { q } = req.query;
res.send(`search results for query: ${q}`);