# Tailwind CSS
-> A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.
-> Utility first means the framework's main focus is on providing utility classes.

# How to use Tailwind CSS 
//Method 1 : Play CDN 
-> Add the Play CDN script to your HTML
   ->Add the Play CDN script tag to the <head> of your HTML file, and start using Tailwind’s utility classes to style your content. 
   // Syntax:  <script src="https://cdn.tailwindcss.com"></script>
   <h1 class="text-3xl font-bold underline">
    Hello world!
  </h1>
  -> But using this method is not good for development .

//Method 2 : Tailwind CLI 
-> Using PostCSS 
   -> Installing Tailwind CSS as a PostCSS plugin is the most seamless way to integrate it with build tools like webpack, Rollup, Vite, and Parcel.
   Terminal:
   npm install -D tailwindcss postcss autoprefixer
   npx tailwindcss init -p

   -> Add the paths to all of your template files in your tailwind.config.js file.
   content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],// we add path in tailwind.config.js 
  // "*" it means that we want to use tailwind for our entier process.

  ->Add the Tailwind directives to your CSS : Add the @tailwind directives for each of Tailwind’s layers to your ./src/index.css file.
  syntax : Include these three in the css file.
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  -> Do 1 more change in our package.json add this
  "scripts": {
    "start": "vite"
  }, // this means that whenever we start our server then it should start using vite.

# Breakpoints 
-> There are five breakpoints by default, inspired by common device resolutions:

Breakpoint prefix 	Minimum width	   CSS
sm	640px	@media (min-width: 640px) { ... }
md	768px	@media (min-width: 768px) { ... }
lg	1024px	@media (min-width: 1024px) { ... }
xl	1280px	@media (min-width: 1280px) { ... }
2xl	1536px	@media (min-width: 1536px) { ... }

# Apply Directives 
-> Use @apply to inline any existing utility classes inot your own custom CSS. 
-> This helps in the reduction of the repetition of the code.
Eg: .box{
    @apply bg-purple-500 text-white m-4 border-2 rounded;
}
// Here box class contains all the properties that we want to apply wherever we use box class
