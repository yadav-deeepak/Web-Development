# CSS STANDS FOR CASCADING STYLE SHEET it is used to add style to the webpage.

# What is cascade in CSS?
-> The CSS cascade algo job is to select CSS declarations in order to determine the correct values for CSS properties.
Eg: h2{
   background-color:yellow;
}
h2{
   background-color: blue; //final color is blue
}

# Basic format of css
selector{
    property: value;
}

# How to include styles?
. Inline styles
  writing the style directly inline on each element
  <h1 style="color: red">Hello World </h1>

. Using <style>tag
  Style is added using the <style>element in the same document
   <style>
      h1{
        color:red;
      }
    </style>

. External Stylesheet
  Writing CSS in a separate document and linking it with HTML file.
  We will use <link> tag to link the css file in <head> tag.
  <head>
      <link rel="stylesheet" ref="style.css">
  </head>

# Properties
1. color property
   Used to set the color of foreground
   color: purple;

2. background color property
   used to set the color of background.
   background-color: red;   

   # Color Systems
   a. Named colors
      Each browser recognizes around 140 named colors.
      Eg- red,blue,black,pink etc
   b. RGB 
      Red  Green Blue (0-255)
      Eg-rgb(255,0,0)
   c. Hexadecimal or Hex
      color=#FFFFFF ;
      LETTERS:0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F

3. Text Properties
   text-align 
   ->This property is used to align the text right left center justify according to the parent.
   Eg:text-align:center; //align the text in center

   font-weight\
   ->It is used to define how much light and dark the text should look.It has value from 100 to 900.
   Eg:font-weight: normal; //400
      font-weight: bold;  //700
      font-weight: bolder;
      font-weight: lighter;

   text--decoration
   ->It sets the appearance of decorative lines on the text like underline.
   Eg: text_decoration: underline;
   text_decoration: overline;
   text_decoration: line-through;

   line-height
   ->controls the height of the line of text
   Eg: line-height:normal;
   line-height:2.5; //2.5*normal

   letter-spacing
   ->controls the horizontal spacing behaivour between text characters
   Eg: letter-spacing:normal;
   letter-spacing: 10px;

   font-size
   ->font size is used to set the size of the text.
   Eg:font-size: value;
   //FONT SIZE UNITS IN CSS
   ABSOLUTE   |    RELATIVE
      px      |      %
      pt      |      em
      pc      |     rem
      cm      |      ch
      mm      |      vh
      in      |     vw + manymore
   
   # Pixels(px)
     most commonly used absolute unit.
     96px=1inch
     not suitable for responsive websites
     font-size:50px;
   
   font-family //use cssfontstack.com
   ->specifies a prioritized list of one or more font famiy names
   Eg: font-family:avant garde,didot,sans-serif; //last ones are backup family fonts.

# Selectors in CSS
  1. UniversaL Selector (*)
  -> To select everything in a document
   *{
      property:value;
   }

  2. Element Selector 
  -> selects all elements of the same type.
   h1{             //h1 is the selected element
      property: value;
   }
  
   3. Id selector
  -> selects an element based on the value of the elemnt's id attribute.
  #idname{
   property:value;
  }

  4.Class Selector
  -> Selects an element based on their class attribute.
  .className{
   property: value;
  }

  5.Descendent Selector 
  -> Selects all paragraphs inside divs.
  div p{          //p inside div has been selected
   property: value;
  }

  6. Adjacent sibling combinator
 -> Eg: h3 that comes immediately after any paragraph.
  p + h3{
   property:value;
  }

  7.Child combinator
  -> Eg: Selects all buttons which are direct children of spans.We can go only one level deep to select the element.
  span>button{
   property:value;
  }

  8.Attribute Selector
 -> Selects element based on the presence or value of a given attribute.
 input[attr="value"]{       //select the input whose attr="value"//
   property: value;
 }

  9.Psudo Class
  -> A keyword added to a selector that specifies a special state of the selected elements.
  syntax: element : pseudoclass

  :hover -when we take mouse cursor on the element then that element is in hover state.

  :active -when we click on the button then is is in active state.

  :checked - used for radio and checkbox buttons

  :nth-of-type -it helps in selecting the nth element.

  10. Pseudo Elements 
  -> A keyword added to a selector that lets you style a specific part of the selected elements.

  ::first-letter ->use to change the styling of first letter of the selected element.

  ::first-line ->used to change the style of the first line of the selected element.

  ::selection ->use to change the style of the element when we select the element on the webpage. 

# Selector Specificity
-> Specificity is an algo that calculates the weight that is applied to a given CSS declaration.
id > class,attribute&pseudo-class > element&pseudo-element
Eg: h2{
   background-color: black;
}
0(id) 0(class,attribute&pseudo-class) 1(element&pseudo-element)
-> so it's weight is 001=1

.myClass:hover{
   color: blue;
}
0(id) 2(class,attribute&pseudo-class) 0(element&pseudo-element)
-> so it's weight is 020=20
//Specificity means jitna specificly aap element ko target krke uski css change krte h utna hi uske apply hone ke chance badhh jaate h.
id>class>element
//When specificity is same the we look for cascading.

#Inline Specificity
-> Inline styles are more specific than id.
inline  id  class,attribute&pseudo-class  element&pseudo-element

# !important
-> To show the most specific thing in document.
Eg: h2{
   background-color: blue !important;//when we write important then this property on h2 can't be changed in future. It will become the most imp 
}

# Inheritance in CSS
-> Inheritance work levelwise.
Childs elements inherit the properties of there parent element.
Some elements such as buttons and input are not able to inherit the parent property.
Some of the properties value can't be inherited.
//To make them inherit we use
input{
   background-color: inherit; //it will inherit the bgcolor of the parent element
}

 /// INTERMEDIATE CSS //
 # Box Model
 -> In webpage all the elements are stored inside the box .

  1. Height
  -> By default it sets the content area height of the element.
  Eg: div{
    height: 100px;
   }

  2. Width
  -> By default it sets the content area width of the element 
  Eg: div{
     width: 300px;
  }

  4.Border
  -> Used to set an element's Border.
  Eg: div{
   border: 2px solid black ;
  }
  //  Border shorthand
  border: border-width border-style border-color; //

  # Border sides
  -> To control an individual side of the box.
  border-left 
  border-right 
  border-top 
  border-bottom

  # Border Radius
  -> Used to round the corners of an element's border edge
  Eg: div{
   border-radius: 15px;
  }

  5. Padding
  -> Space between the border and the content area is given using padding.
  Eg: div{
   padding: 10px;
  }
  we can set padding-left padding-right padding-top padding-bottom separately.
  // PADDING SHORTHAND //
  #1 For all 4 sides            #2 top & bottom| left & right
  -> padding: 50px;             -> padding: 1px 2px;

  #3 top|left&right|bottom      #4 top|right|bottom|left
  -> padding: 1px 2px 3px;      -> padding: 1px 2px 3px 4px;
 
  6. Margin
  -> To set spacing on the outside of the border.
  Eg: div{
   margin-top: 10px;
   margin-bottom:10px;
   margin-left: 20px;
   margin-right: 20px;
  }
  // MARGIN SHORTHAND //
   #1 For all 4 sides            #2 top & bottom| left & right
  -> nargin: 50px;             -> margin: 1px 2px;

  #3 top|left&right|bottom      #4 top|right|bottom|left
  -> margin: 1px 2px 3px;      -> margin: 1px 2px 3px 4px;

  # Display
  -> It sets whether an element is treated as a block or inline element an the layout used for its children.
  Eg: display: inline/block;
  -> if we set the value as inline the element will start behaving as inline element and if we set it as block then it will start behaving as block element.

  # Inline-block
  -> It is used if we want to aplly all the properties applied to the element to get applied when it is in inline state.
  -> style will be applied according to block element and it will behave as inline element.
  Eg: div{
   height: 100px;
   width: 100px;
   display: inline-block;
  }
  display: none;// it will set the display as none and the element will disappear from the screen 
  -> So if we want hide a element we can set its display as none

# RELATIVE UNITS
1. Percentage(%)
-> It is often used to define a size as relative to an element's parent object.
Eg: width: 33%; //relative to the parent

2.em
-> Font size of the parent, in the case of typographical properties like font-size,and font-size of the element itself,in case of other properties like width.
-> Drawback OF Em 
   snowball effect in nested elements.
   ->To AVOID THIS Rem(Root Em)is used.

   3. Rem(Root Em)
   -> Font size of the root element

# CSS NEXT STEP
# Alpha channel
-> sets the opacity for a color
ranges from 0to1(0:hidden 1:visible)
Eg: rgba(255,255,255,0.3); //here a stands for alpha

# Opacity
-> Sets the opacity for the element
Ranges from 0to1(0:hidden 1:visible)
Eg: opacity: 0.5;

# CSS Transitions
-> Transitions enable you to define the transition between two states of an element.
//TRANSITION SHORTHAND//
Property name | duration | timing func | delay
Eg: transition: margin-top 2s ease-in-out 0.2s;

# CSS Transform
-> This property lets you rotate,scale,skewor translate an element.
1. rotate
-> transform: rotate(45deg);

2. scale
-> transform: scale(0.5);//size half hojjayega//
scale(x,y);// we can define how much we want to scale on xaxis and yaxis//

3. Translate
->transform: translate(50px,50px);
we can move our element along x and y axis

4.skew
-> transform: skew(30deg);

# Box shadow
-> It adds shadow effects around an element's frame.
Eg: box-shadow: 2px 2px 10px green;
// box-shadow: xoffset yoffset blurRadius color;

# Background Image
-> Lets you set an image as a background.
Eg: background-image: url("./xyz.jpg");
    background-size: contain/cover/auto; 

# Position
-> The position CSS property sets how an element is positioned in a document.
-> The top,right,bottom and left properties determine the final location of positioned elements.
  1. static
  -> The top,right,bottom.left and zindex properties have no effect.
  -> This is the default value.
  Eg: position: static;

  2. relative
  -> The offset is realative to itself based on the values of top,right,bottom,and left.
  Eg: position: relative;// Objects position is taken as reference and it is moved with respect to its orignal position.

  3. absolute
  -> The element is removed from the normal doucment flow ,and no space is created for the element in the page layout.
  -> It is positioned relative to its closest positioned ancestor , if any; otherwise it is placed relative to the initial containing block.
  Eg: positon: absolute;//If parent has no position then it will placed relative to the intitial containing block//

  4. fixed
  -> The element is removed from the normal document flow and no space is created for the element in the page layout.
  -> It is positioned realtive to the initial containing block established by the viewport.
  Eg: position: fixed;

# FLEXBOX
-> It is a one dimensional layout method for arranging items in rows or columns.
-> It helps in making our website responsive.

# The Flex Model
        |                    direction=row
        |                
   _____|__________________  main axis
        |
        |
        |
      cross axis

-> There is one flex container and inside it we have flex items .We make the display of flex container as flex to use all the flexbox properties on the flex items.

# Flexbox direction
-> It sets how flex items are placed in the flex container along which axis and direction.
  
  flexbox-direction: row; //main axis left to right
  flexbox-direction: row-reverse; //main axis right to left
  flexbox-direction: column; //cross axis top to bottom
  flexbox-direction: column-reverse; //cross axis bottom to top 

# Justify content
-> Tells how the browser distributes space between and around content items along the main axis
   
   justify-content: flex-start;
   justify-content: flex-end;
   justify-content: center;
   justify-content: space-between;//extra space will go in between the flex items//
   justify-content: space-around;//extra space will cover around the flex item//
   justify-content: space-evenly;//space will be evenly distributed around the flex item//
  
# Flex Wrap
-> Sets whether flex flex items are forced onto one line or can wrap onto multiple lines.

  flex-wrap: nowrap;//by default//
  flex-wrap: wrap;//flex items that will not come in same line will come in next line//
  flex-wrap: wrap-reverse;

# Align items
-> Distributes our items along the cross axis
  
  align-item: flex-start;
  align-item: flex-end;
  align-item: center;
  align-item: baseline;//all the item will be on the same baseline priority will be given to the content baseline//

# Align content
-> It sets the distribution of space between and around content items along a flexbox's cross axis.

  align-content: flex-start/flex-end/center;
  align-content: space-between/space-around/evenly;
  align-content: baseline;

# Align Self 
-> Align an item along the cross axis
-> It is for individual item
  alignself > alignitem
  
  align-self: flex-start;
  align-self: flex-end;
  align-self: center;
  align-self: baseline;

# Flex Sizing

1. flex-basis
-> It sets the initial main size of a flex item.
   
   flex-basis: 100px;

2. flex-grow
-> It specifies how much of the flex container's remaining space should be assigned to the flex item's main size

  flex-grow: 1;

3. flex-shrink
-> It sets the flex shrink factor of a flex item.

  flex-shrink: 1;

// FLEX SHORTHAND //
1. flex-grow | flex-shrink | flex-basis
-> flex:2 2 100px;

2. flex-grow | flex-basis
-> flex: 2 100px;

3. flex-grow(unitless)
-> flex: 2;

4. flex-basis
-> flex: 100px;

# CSS GRID
-> Setting a container's display to grid will make all children grid items.
Eg: container{
   display: grid;
}

# Grid Model

             COLUMN LINES
       L1      L2      L3      L4
   ____|_______|_______|_______|____L1
       |       |       |       |
       |       |       |       |
   ____|_______|_______|_______|____L2    
       |       |       |       |         ROW LINES
       |       |       |       |
   ____|_______|_______|_______|____L3
       |       |       |       |
       |       |       |       |
   ____|_______|_______|_______|____L4
       |       |       |       |

-> Horizontal lines: Row lines.
-> Vertical Lines: Column lines.
-> Grid cell: When row line and column lines are combined they for a cell which is known as grid cell.
-> Grid track: It is the distance between two line.
Eg: Distance between L1 & L2 is grid track.

# Grid Template
-> They define the line and track sizing.

   grid-temlplate-rows
   -> gird-template-rows: 100px 100p 100px;//creates 3 rows of 100px.

   grid-Template-columns
   -> gird-template-columns: 100px 100px 100px;//creates 3 columns of 100px
   -> We can also give it value as auto this will divide the columns into equal parts
   Eg: gird-template-columns:auto auto;//divide the space in 2 equal part and make 2 columns

-> Repeat is used to divide all available space.
Eg: grid-temlplate-rows: repeat(count,1fr);
    grid-Template-columns: repeat(count,1fr);
    //1fr means 1fraction of 100% width in case of rows & 1fraction of 100% height in columns

    grid-template-rows: repeat(4,1fr);
    grid-template-rows: 1fr 1fr 1fr 1fr;// we can also write the above repeat like this.

# Grid Gaps
-> They define the gaps between lines.
   
   row-gap: 10px;
   column-gap:10px;
   grid-gap: rowGap columnGap;

# Grid columns
-> Defines an item's starting and ending position inside the column. 

   grid-column-start: line_number;
   grid-column-end: line_number;
   grid-column: start-col/ end-col;
   grid-column: start_col/ span number;

# Grid rows
-> Define an item's starting & ending position inside the row.
   
   grid-row-start: line_number;
   grid-row-end: line_number;
   grid-row: start_row/end_row;
   grid-row: start/span number;

# Common Properties 
1. Horizontal align 
-> justify-items (container)
-> justify-self (item)

2. Vertical align 
-> align-items (container)
-> align-self (item)

-> place-items (container)// if we want to align the items in the center of container we can use place-item:center;
->place-self(item)

// By default grid is an block element but if we want it to be inline we can use
-> display: inline-grid;

# CSS Animations
-> To animate CSS elements
  @keyframes fontAnimation{ //blueprint of animation
   from{font-size: 20px;}
   to{font-size: 40px;}
  }
-> animation-name
   animation-name: fontAnimation;//animation which we want to apply in above example it is fontAnimation//

-> animation-duration
   animation-duration: 2s;//how long animation should stay//

-> animation-timimg-function
   animation-timing-function: ease-in;//how animation should take place//

-> animation-delay
   animation-delay: 1s;// animation hone me kitne der ka delay ho//

-> animation-iteration-count
   This tells how many times you want to show the animation.
   Eg: animation-iteration-count: 1/2/3/4...infinite;

-> animation-direction 
   animation-direction: normal/reverse many more read from mdn;//tells the direction of animation

// ANIMATION SHORTHAND //
-> animation: myName 2s linear 3s infinite normal;

# % in Animation
-> @keyframes myName{
   0%{font-size: 20px;}
   50%{font-size: 30px;}
   100%{font-size: 40px;}
}
// here we are giving at what percent what change should be applied in above from means 0% to means 100%.

# Media Queries
-> Helps to create a responsive website.
   media features-width(of viewport)
   Eg: @media(width:400px){
      div{
         background-color: red;
      }
   }

    @media(min-width:400px){// if width is 400px or more then these changes will be applied//
      div{
         background-color: red;
      }
   }

    @media(max-width:400px){//if width is 400px or less than 400px then these changes will be applied//
      div{
         background-color: red;
      }
   }

    @media(min-width: 200px) and (max-width: 300px){//200px -300px range me ye changes apply honge//
      div{
         background-color: red;
      }
   }

# orientation(of viewport)
-> @media( orientation: landscape){//if orientation is landscape the the colur will change
   div{
      background-color: red;
   }
}

# z-index
-> It decides the stack level of the elements
-> Overlapping elements with a larger z-index cover those with a smaller one.
Eg: z-index: auto(0);
    z-index: -1/-2/1/2/....;
// By default value is 0
// If we want to change the zindex of any element then its position shoul not be static or default.