# JAVASCRIPT
-> JavaScript is the programming language of the Web.
-> Used to program the behavior of web pages.

# Using the console
// Uses REPL(Read-Evaluate-Print-Loop)
-> Open the browser inspect and open the console.
-> Code we write on console is temporary it will be removed as soon as we refresh the page.
-> To clear the console om windows use ctrl+L .

# Variables
-> A variable is simply the name of a storage location where we store our data.
Eg: a=10 // Here a is a variable whose value is 10

# Data Types In JS 
1. Primitive Types
// We can use typeof operator to check the type of the data .
-> JS automatically detects the typeof variable.
Eg: typeof variableName
-> Number
  -> Positive(14) & negative(-4)
  -> Integers(45,-50)
  ->Floating numbers - with decimal(4.6,-8.9)
     Eg: a=10 //a is a number 
  
  # Operation in JS
  -> Addition
  Eg: a=20 b=10
      sum=a+b //a & b are operands & + is operator
  -> Subtraction
  Eg: a=20 b=10
      diff=a-b
  -> Multiplication
  Eg: mul=a*b
  -> Division
  Eg: div=a/b 
  -> Modulo(Remainder operator)
  Eg: 12 % 5=10
  -> Exponentiation( Power operator)
  Eg: 2**3=8

 # Operator Precedence
 -> This is the general order of solving an expression.
 order: ( ) > ** > *,/,% > +,-
 -> Highest priority is of ( ) & lowest is +,-

-> Boolean
  -> Bollean represents a truth value-> true/false/yes/no
  Eg: let age=23;
      let isAdult=true;

 # String
  -> Strings are text or sequence of characters 
  -> Anything written inside a single quote(' ') is string. 
     Eg: let name="Tony" // name is a string 
         let num='123'; // typeof num is string
 
  # String Indices
  -> let name = "TONY STARK";
  -> To find the length of the string we use 
  Eg: name.length // 10 (return the length of string)
  -> T O N Y   S T A R K 
     0 1 2 3 4 5 6 7 8 9  //0 based indexing
     name[0]-> 'T' name[1]-> 'O' name[2]-> 'N' name[3]-> 'Y' name[4]-> ' ' 
     name[5]-> 'S' name[6]-> 'T' name[7]-> 'A' name[8]-> 'R' name[9]-> 'K' 

  # Concatenation
  -> Adding strings together.
  Eg: "tony" + " " + "stark" = "tony stark"

# Undefined
-> A variable that has not been assigned a value is of type undefined.
Eg: let a; // type of a is undefined

# Null
-> The null value represents the intentional absence of any object value.
-> To be explicitly assigned.
Eg: let a =null; // type of a is 'object' and value is null

-> Bigint
-> Symbol

# NaN IN JS 
-> The NaN global property is a value representing Not-A-Number.
-> typeof NaN is number but the number it is representing is not a valid number.
-> Basically NaN is just a invalid number
Eg: 0/0 //0 but it's type is NaN 
   NaN-1 //NaN
   NaN*1 //NaN
   NaN+NaN //NaN

# let keyword
-> Syntax of declaring Variables.
-> In max cass we will be using let keyword to declare a variable.
Eg: let age=23;    let cgpa;
   age=age+1;      cgpa=8.9;

# const keyword 
-> values of constants can't be changes with re-assignment & they can't be re-declared
Eg: const year= 2025;    const pi=3.14;
    year=2026 //Error    const g=9.8;
    year=year+1 //Error

# var keyword
-> Old syntax of writing Variables
Eg: var age=23;
    var cpgpa=8.9;

# Assignment Operator
-> It is used to assign a value to a variable. 
-> age=age+1 / age+=1

# Unary Operators
-> Unaray operators require one operand .
Eg: age+=1 // 1 operand age
    age++; //Increment operator
    age--; //decrement operator 
# Pre-Increment( change then use)
-> let age = 10;
   lete newAge= ++age;

# Post-increment(use then change)
-> let age=10;
let newAge= age++;

# Identifier Rules
-> All JS variables must be identified with unique names (identifiers)
   -> Names can contain letters, digits , underscores and dollor signs .(no space)
   -> Name must begin with a letter.
   -> Names can laso begin with $ and  _ .
   -> Names are case sensitive (y and Y are different variables).
   -> Reserved words cn't be used as names.

# camelCase
-> way of writing identifiers.
Eg: camelCase(JS naming convention): let fullName;
    snake_case: let full_name;
    PascalCase: let FullName;

# TypeScript
-> Static Typed, whwere JS is dynamic typed.
-> Designed by Microsoft
Eg: TS -> a=5; a=true;//this will give error once a data type is declared it can't be changed.
Js -> a=5; a=true; //this will not give error as JS is dynamically typed.

# console.log()
-> To write(log) a message on the console.
-> It links the console of browser to the js file.
Eg: console.log("Suraj");
    console.log("Viper");

# Linking JS file
-> To link js file with html we use <script> tag.
-> Syntax: <script src="app.js"></script> 
-> We link the js file just before the closing of body tag.

# Comments in JS
-> To write comments in js we write 2 forward slash before the statement/ or we can use ctrl+/ 
-> Comments can't be seen in the console window.
Eg: // console.log("Hello JavaScript!");

# Template Literals
-> They are used to add embedded expressions in the string.
-> Back ticks are used (` `).
Eg: let a=5;
    let b=10;
    console.log(`Your pay ${a+b} rupees`);

# Operators in  JS

1. Arithmetic (+,-,*,/,%,**)
2. Unary (++,--)
3. Assignment (=,+=,*=,-=,/=,%=)

4. Comparison Operators 
-> To compare 2 values.
-> Returns true/ false or 0/1  
     >,>=,<.<=,==,!=
-> == ( double equalto) ignore the type of the variable it just compare value.
Eg: let a =5;// number
    let str='5';//string
    a==str;// true
-> So when we want to compare type and value both we use === ( tripple equalto) operator.
Eg:  let a =5;// number
    let str='5';//string
    a===str;// false

   # Comparison for non-numbers
   ->'a'<'A' // false 
   -> Each character has its own ASCII number.So when we compare characters these ASCII values are compared.
   -> 'a'- 61 , 'b'- 62,....
    'A' - 41 , 'B'- 42,....

5. Logical Operators 
-> Logical operators to combine expressions.
-> If we have multiple logical operators in a single expression then we solve it from left to right.
1. && (Logical AND): (exp1) && (exp2)
-> Gives true when both exp1 and exp2 are true.

2. || (Logical OR): (exp1) || (exp2)
-> Gives true when any one of expression is true.

3. ! (Logical NOT): !(exp)
-> If exp is true !exp returns false /exp is false then !exp returns true. 

# truthy & falsy
-> Everything in JS is true /False(in boolean context).
-> This doesn't mean their value itself is false or true, but they are treated as flase /true if taken in boolean context.
// FALSY values
-> false, 0, -0,0n(Bigint value),""(empty string),null,undefined,NaN

// TRUTHY values
-> Everything else

# Conditional statements
-> if-else
   Syntax: if(condition){
           statement; //condition is true
           }  
           else if(condition) { //if above condition is not true then this condition will be checked
            statement;
           }  
           else statement; //when all of the above conditions are false then else statement is executed 

-> nested if-else
   -> Nesting is writing if else inside  if else statements.It can have many levels.
   Syntax: if(condition){
                 if(condition){
                    statement;
                 } 
                 else statement;
            }
            else statement;

-> switch statement
   -> Used when we have some fixed values that we need to compare to.
   Syntax: switch(condition){
               case 1 : statement;
                        break;
               case 2 : statement;
                        break;
               default : statement; //When all the case are flase then default statement run.   
           }  

# ALERT & PROMPT
->Alert displays an alert message on the page.
Eg: alert("Something's wrong");

-> Prompt displays a dialogue box that asks user for some input.
Eg: prompt("Please enter your rollno."); 

# console.error("Error message");
-> This is used to show an error mssg on the console.

# console.warn("Warning!");
-> This is used to show a warning mssg on console.