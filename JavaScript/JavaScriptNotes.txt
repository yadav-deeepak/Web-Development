# JAVASCRIPT
-> JavaScript is the programming language of the Web.
-> Used to program the behavior of web pages.

# Using the console
// Uses REPL(Read-Evaluate-Print-Loop)
-> Open the browser inspect and open the console.
-> Code we write on console is temporary it will be removed as soon as we refresh the page.
-> To clear the console om windows use ctrl+L .

# Variables
-> A variable is simply the name of a storage location where we store our data.
Eg: a=10 // Here a is a variable whose value is 10

# Data Types In JS 
1. Primitive Types
// We can use typeof operator to check the type of the data .
-> JS automatically detects the typeof variable.
Eg: typeof variableName
-> Number
  -> Positive(14) & negative(-4)
  -> Integers(45,-50)
  ->Floating numbers - with decimal(4.6,-8.9)
     Eg: a=10 //a is a number 
  
  # Operation in JS
  -> Addition
  Eg: a=20 b=10
      sum=a+b //a & b are operands & + is operator
  -> Subtraction
  Eg: a=20 b=10
      diff=a-b
  -> Multiplication
  Eg: mul=a*b
  -> Division
  Eg: div=a/b 
  -> Modulo(Remainder operator)
  Eg: 12 % 5=10
  -> Exponentiation( Power operator)
  Eg: 2**3=8

 # Operator Precedence
 -> This is the general order of solving an expression.
 order: ( ) > ** > *,/,% > +,-
 -> Highest priority is of ( ) & lowest is +,-

-> Boolean
  -> Bollean represents a truth value-> true/false/yes/no
  Eg: let age=23;
      let isAdult=true;

 # String
  -> Strings are text or sequence of characters 
  -> Anything written inside a single quote(' ') is string. 
     Eg: let name="Tony" // name is a string 
         let num='123'; // typeof num is string
 
  # String Indices
  -> let name = "TONY STARK";
  -> To find the length of the string we use 
  Eg: name.length // 10 (return the length of string)
  -> T O N Y   S T A R K 
     0 1 2 3 4 5 6 7 8 9  //0 based indexing
     name[0]-> 'T' name[1]-> 'O' name[2]-> 'N' name[3]-> 'Y' name[4]-> ' ' 
     name[5]-> 'S' name[6]-> 'T' name[7]-> 'A' name[8]-> 'R' name[9]-> 'K' 

  # Concatenation
  -> Adding strings together.
  Eg: "tony" + " " + "stark" = "tony stark"

# Undefined
-> A variable that has not been assigned a value is of type undefined.
Eg: let a; // type of a is undefined

# Null
-> The null value represents the intentional absence of any object value.
-> To be explicitly assigned.
Eg: let a =null; // type of a is 'object' and value is null

-> Bigint
-> Symbol

# NaN IN JS 
-> The NaN global property is a value representing Not-A-Number.
-> typeof NaN is number but the number it is representing is not a valid number.
-> Basically NaN is just a invalid number
Eg: 0/0 //0 but it's type is NaN 
   NaN-1 //NaN
   NaN*1 //NaN
   NaN+NaN //NaN

# let keyword
-> Syntax of declaring Variables.
-> In max cass we will be using let keyword to declare a variable.
Eg: let age=23;    let cgpa;
   age=age+1;      cgpa=8.9;

# const keyword 
-> values of constants can't be changes with re-assignment & they can't be re-declared
Eg: const year= 2025;    const pi=3.14;
    year=2026 //Error    const g=9.8;
    year=year+1 //Error

# var keyword
-> Old syntax of writing Variables
Eg: var age=23;
    var cpgpa=8.9;

# Assignment Operator
-> It is used to assign a value to a variable. 
-> age=age+1 / age+=1

# Unary Operators
-> Unaray operators require one operand .
Eg: age+=1 // 1 operand age
    age++; //Increment operator
    age--; //decrement operator 
# Pre-Increment( change then use)
-> let age = 10;
   lete newAge= ++age;

# Post-increment(use then change)
-> let age=10;
let newAge= age++;

# Identifier Rules
-> All JS variables must be identified with unique names (identifiers)
   -> Names can contain letters, digits , underscores and dollor signs .(no space)
   -> Name must begin with a letter.
   -> Names can laso begin with $ and  _ .
   -> Names are case sensitive (y and Y are different variables).
   -> Reserved words cn't be used as names.

# camelCase
-> way of writing identifiers.
Eg: camelCase(JS naming convention): let fullName;
    snake_case: let full_name;
    PascalCase: let FullName;

# TypeScript
-> Static Typed, whwere JS is dynamic typed.
-> Designed by Microsoft
Eg: TS -> a=5; a=true;//this will give error once a data type is declared it can't be changed.
Js -> a=5; a=true; //this will not give error as JS is dynamically typed.

# console.log()
-> To write(log) a message on the console.
-> It links the console of browser to the js file.
Eg: console.log("Suraj");
    console.log("Viper");

# Linking JS file
-> To link js file with html we use <script> tag.
-> Syntax: <script src="app.js"></script> 
-> We link the js file just before the closing of body tag.

# Comments in JS
-> To write comments in js we write 2 forward slash before the statement/ or we can use ctrl+/ 
-> Comments can't be seen in the console window.
Eg: // console.log("Hello JavaScript!");

# Template Literals
-> They are used to add embedded expressions in the string.
-> Back ticks are used (` `).
Eg: let a=5;
    let b=10;
    console.log(`Your pay ${a+b} rupees`);

# Operators in  JS

1. Arithmetic (+,-,*,/,%,**)
2. Unary (++,--)
3. Assignment (=,+=,*=,-=,/=,%=)

4. Comparison Operators 
-> To compare 2 values.
-> Returns true/ false or 0/1  
     >,>=,<.<=,==,!=
-> == ( double equalto) ignore the type of the variable it just compare value.
Eg: let a =5;// number
    let str='5';//string
    a==str;// true
-> So when we want to compare type and value both we use === ( tripple equalto) operator.
Eg:  let a =5;// number
    let str='5';//string
    a===str;// false

   # Comparison for non-numbers
   ->'a'<'A' // false 
   -> Each character has its own ASCII number.So when we compare characters these ASCII values are compared.
   -> 'a'- 61 , 'b'- 62,....
    'A' - 41 , 'B'- 42,....

5. Logical Operators 
-> Logical operators to combine expressions.
-> If we have multiple logical operators in a single expression then we solve it from left to right.
1. && (Logical AND): (exp1) && (exp2)
-> Gives true when both exp1 and exp2 are true.

2. || (Logical OR): (exp1) || (exp2)
-> Gives true when any one of expression is true.

3. ! (Logical NOT): !(exp)
-> If exp is true !exp returns false /exp is false then !exp returns true. 

# truthy & falsy
-> Everything in JS is true /False(in boolean context).
-> This doesn't mean their value itself is false or true, but they are treated as flase /true if taken in boolean context.
// FALSY values
-> false, 0, -0,0n(Bigint value),""(empty string),null,undefined,NaN

// TRUTHY values
-> Everything else

# Conditional statements
-> if-else
   Syntax: if(condition){
           statement; //condition is true
           }  
           else if(condition) { //if above condition is not true then this condition will be checked
            statement;
           }  
           else statement; //when all of the above conditions are false then else statement is executed 

-> nested if-else
   -> Nesting is writing if else inside  if else statements.It can have many levels.
   Syntax: if(condition){
                 if(condition){
                    statement;
                 } 
                 else statement;
            }
            else statement;

-> switch statement
   -> Used when we have some fixed values that we need to compare to.
   Syntax: switch(condition){
               case 1 : statement;
                        break;
               case 2 : statement;
                        break;
               default : statement; //When all the case are flase then default statement run.   
           }  

# ALERT & PROMPT
->Alert displays an alert message on the page.
Eg: alert("Something's wrong");

-> Prompt displays a dialogue box that asks user for some input.
Eg: prompt("Please enter your rollno."); 

# console.error("Error message");
-> This is used to show an error mssg on the console.

# console.warn("Warning!");
-> This is used to show a warning mssg on console.

# String Methods
-> Methods - Actions that can be performed on objects.
SyntaX: stringName.method();

# trim()
-> str.trim();
-> Trims whitespaces from both ends of string & returns a new one.
Eg: let msg="   HELLO   ";
    msg.trim(); // 'HELLO'
    -> Output will be 'HELLO' but value of msg remains same "   HELLO   "

# Strings are Immutable in JS
-> No changes can be made to strings.
-> Whenever we do try to make a change ,a new string is created and old one remians same. 

# toUpperCase()
-> str.toUpperCase();
-> It is used to convert the string into uppercase.
Eg: let a="hello";
    a.toUpperCase(); //'HELLO'

# toLowerCase()
-> str.toLowerCase();
-> It is used to convert the string into lowercase.
Eg: let a ="HELLO";
    a.toLowerCase();// 'hello'

# String Methods with arguments
-> Argument is a some value that we pass to the method.
-> Format: stringName.method(arg);
  
  1. indexOf()
  -> Returns the first index of occurrem=nce of some value in string or gives -1 if not found.
  -> This method returns the first occurrence of the variable.
  -> let str ="ILoveCoding";
     str.indexOf("Love"); //1
     str.indexOf("j"); // -1 (not found)
     str.indexOf("o") // 2(only 1 index)

  2. slice()
  -> Returns a part of the orignal string as a new string.
  Eg:  let str ="ILoveCoding";
       str.slice(5); // "Coding" from 5th index till last index value will be printed
       str.slice(1,5) //"Love" 1to 4 str will be printed
       str.slice(-num) = str.slice(length-num)

# Method Chaining
-> Using one method after another. Order of execution will be left to right.
Eg: str.toUpperCase().trim();

# replace() 
-> Searches a value in the string & returns a new string with the value replaced.
-> The first occurrence gets replaced
Eg: let str = "ILoveCoding";
    str.replace("love","do"); //"IdoCoding"

# repeat() 
-> Returns a string with the number of copies of a string.
Eg: let str ="Mango";
str.repeat(3); //"MangoMangoMango"

# Array (Data structure)
-> Linear collection of things.
-> In JS arrays are of object type.
Synatax: let students =["viper" , "suraj" ,"deepak"];
-> To access the data in array we use indexes
Eg: students[1]; // "suraj"

# Visualizing Array
-> let nums =[2,3,5,7];
              0 1 2 3  //index
-> To access an array element we can use index number.
   nums[0]=2
   nums[1]=3
   typeof(nums); //object

# Creating arrays
-> let marks=[99 , 89 , 67 , 100];
-> let students =["viper" , "suraj" ,"deepak"];
-> let info = ["Viper" , 25 , 9.9]; //Mixed array
// Empty Array
-> let newArr = [];
-> We can get the size of array by using 
  //arr.length();

# Arrays are Mutable
-> This means that value of an element in array can be changed and no new array will be created.
Eg: let fruits =['MANGO" , "APPLE" , "LITCHI"];
    fruits[0] = "banana";
    //fruits=["banana" , "APPLE" , "LITCHI"]
    fruits[10]="orange";
-> The spaces we left will be counted as empty spaces in array .
  fruits=["banana" , "APPLE" , empty*7 , "LITCHI"]

# Array Method
   1. Push: add to end.
   2. Pop: delete from end & returns it
   3. Unshift: add to start.
   4. shift: delete from start & returns it.
   Eg: 
       let cars =["audi","bmw","xuv","maruti"];
       console.log(cars); //['audi', 'bmw', 'xuv', 'maruti']
       cars.push("toyota");
       cars.push("ferrari");
       console.log(cars);//['audi', 'bmw', 'xuv', 'maruti', 'toyota', 'ferrari']
       cars.pop(); //Returns ferrari
       console.log(cars);// ['audi', 'bmw', 'xuv', 'maruti', 'toyota']
       cars.unshift("ferrari");
       console.log(cars);//['ferrari', 'audi', 'bmw', 'xuv', 'maruti', 'toyota']
       cars.shift();// Returns ferrari
       console.log(cars);//['audi', 'bmw', 'xuv', 'maruti', 'toyota']
    
    5. indexOf: returns index of somenthing
       Eg: let primary =['red','yellow','green'];
           console.log(primary.indexOf('yellow'));

    6. includes: search for a value
       Eg: primary.includes("red"); //true

    7. concat: merge 2 arrays.
       Eg: primary.concat(secondary);//merges secondary array with primary array.

    8. reverse: reverse an array.
       -> Changes are not done in existing array a new array is created we can use it by storing it in another variable. 
      Eg: primary.reverse();//['green','yellow','red'];

    9. slice: Copies a portion of an array.
       syntax: slice(start,end);
       -> returns value from start to end-1.
       Eg: let color = ["red","yellow","blue","orange","pink","white"];
       color.slice();//["red","yellow","blue","orange","pink","white"]
       color.slice(2);// ["blue","orange","pink","white"]
       color.slice(2,3);// ["blue"]
       color.sloce(-2);// ["pink","white"] last se  2 elements return hojaayenge
      
    10. splice: removes/replaces/add elements in 
        place.
        -> It's changes are applied into the orignal array
        -> It returns the array of elements deleted
        Synatax: splice(start,deleteCount,item0......itemN)
        Eg: color.splice(4);//returns ["pink","white"]
            color // ["red","yellow","blue","orange"]
            color.splice(0,1);// returns ["red"]
            color //["yellow","blue","orange"]
            color.splice(0,1,"black","grey"); //returns ['yellow']
            color //["black","grey","blue","orange"]
    
    sort: sorts an array
    -> It first converts into string and then sort it. That is the reason why numbers are not sorted properly.
    -> We use sort when we have to sort characters or string elements.
    Eg: let days =["moday","sunday","wednesday","tuesday"];
        days.sort(); // ["moday","sunday","tuesday","wednesday"] sorted in alphabetical order
        let squares =[25,16,4,49,36,9];
        squares.sort(); // [16,25,36,4,49,9]

# Array References
-> References means address in memory.
Eg: "name" == "name" //true
    [1] == [1] // false
    [] == [] //false
-> The above 2 values are false due to array references.
-> Whenever an array is created an reference variable is created in JS 
Eg: let nums = [1,2,3];
// Here nums is a reference variable which will be used to acces the array elements.
    let arr1 = [1];
    let arr2 =[1];
    // arr1 & arr2 has the menory addres of its first variable not the value [1] that is the reason why we will get false when we compare arr1 ==arr2 //False
    
Eg2: let arr1 = ['a','b'];
     let arrCopy = arr1;
     arrCopy.push('c');
     console.log(arr1); //['a','b','c']
     console.log(arr1==arrCopy); //true
-> So here arrCopy has same address as arr1 so it is giving true when arr1==arrCopy
-> Any changes done in arrCopy will be reflected in arr1.

# Constant arrays
-> const arr=[1,2,3,4];
-> When we create a constant array then we can increase or decrease its length but we can't change the array completely.
-> This means that variable name arr becomes constant
the address that is stored in arr remains same it can't be changed.

# Nested Arrays / Multi dimensional arrays
-> Arrays of array
Eg: let nums =[[2,4],[3,6],[4,8]];
    console.log(nums); //(3) [Array(2), Array(2), Array(2)]
    console.log(nums.length);//3
    nums[0][0];//2
    nums[0][1];//4

# Loops
-> Loops are used when we want to perform same task multiple times.
-> Loops are used to iterate a piece of work.

# for loops
-> Syntax: for(initialization ; condition; updation){
                 //do Something
            }
Eg: for(let i=0;i<=5;i++){
    console.log(i);
}

# Infinte lopps
-> When condition in loop is missing or is never ending then it will create a never ending loop known as infinite loop.
Eg: for( let i=1;i>=0;i++){
    }
    for(let i=1;i<=5;i--){
    }
    for(let i=1;  ; i++){
    }

# parseInt()
-> It is used to return the number part of the input.
-> If we take input from prompt it takes input in form of string so if we want to convert it to number we can use it.
Eg: let n = prompt("Enter your number");
        n= parseInt(n);


# Nested for loop
-> For loop inside for loop
-> for(let i=1;i<=3;i++){
      for(let j=1;j<=3;j++){
        console.log(j);
      }
   }

# while loop
-> Syntax: while(condition){
             //do something
            }
    Eg: let i=1;
    while(i<=5){
        console.log(i);
        i++;
    } 

# break keyword
-> It helps us to get out of the lopp execution.
Eg: let i=1;
while(i<=5){
   if(i==3){ // As soon as i gets 3 the loop will break.
      break;
   }
   console.log(i);
   i++;
}

# Loops with arrays
-> let fruits = ["mango","apple","banana","litchi","orange"];
// We can access array elements using for loop //
for(let i=0;i<fruits.length;i++){
    console.log(i, fruits[i]);
}

# Nested loops with nested arrays
-> let heroes = [["ironman","spiderman","thor"],["superman","wonderwoman","flash"]];

for(let i=0;i<heroes.length;i++){
    console.log(`List #${i}`);
    for(int j=0;j<heroes[i].length;j++){
        console.log(heroes[i][j]);
    }
}

# for of loop 
-> for(element of collection){
    //do something
}
Eg: let fruits = ["mango","apple","banana","litchi","orange"];
for( fruit of fruits){
    console.log(fruit);
} 

# Nested for of loop
-> let heroes = [["ironman","spiderman","thor"],["superman","wonderwoman","flash"]];
for(list of heroes){
    for(hero of list){
        console.log(hero);
    }
}

# Object Literals
-> Used to store keyed collections & complex entities.
-> property=>(key,value)parseInt
-> Objects are collection of properties.
Eg: student
   name  "Deepak"  //property1
   age    22      //property2
   marks  6.9     //property3
   key    value

// student is a object with name age and marks as its property in the form of key value pair.

# Creating object Literals
Eg: let delhi = {
    latitude: "22.7041 N",
    longitude: "77.1025 E"
};
-> const student = { 
     name: "Viper",
     age: 23,
     marks: 6.9,
     city: "Delhi"
};
-> The object literal created with const will have its address as constant and we can change any of the propert value according to our need.

// We can also use arrays inside objects
Eg: const item ={
   price: 100.99,
   discount: 50,
   colors: ["red","pink"]
};

# Get values
-> let student ={
    name: "Viper",
    marks: "94.4
};
// We can access it by following ways
   student["name"]  //objectName["key"]
   student.name     //objectName.key
-> objectName["key"]
   We use this method when we need to use a variable to access the object data.
   Eg: let prop = "repost";
      post[prop];
    //We can access it like this but we can't use variable like this in objectName.key method
-> objectName.key 
   We use this when we want to access the content of object without using another variable.
   Eg: post.repost;

-> JS automatically converts objects keys to strings.
-> Even if we made number as a key , the number will be converted to string.

# Add / Update value
-> let student = {
    name: 'Viper',
    age: 23,
    marks: 9.9,
    city: "Delhi"
};
=> Change the city to 'Mumbai"
   student.city = "Mumbai";

=> Add a new property gender: "Male"
   student.gender;
   student.gender= "Male";

=> Chnage the marks to "A"
   student.marks='A';

# Delete a key value pair
-> delete objectName.keyName;
-> Returns ture if key is deleted successfully else false.

# Object of Objects
-> Storing information of multiple students.
Eg: const classInfo = {
    aman : {
        grade: "A",
        city: "Delhi"
    },
    viper : {
        grade: "A+",
        city: "Banglore"
    },
    Suraj : {
        grade: "A",
        city: "Mumbai"
    }

};

# Array of objects
-> Storing information of multiple students.
Eg: const classInfo = [{name: "viper",age: 21,city: "Delhi"},{name: "suraj",age: 20,city: "Lucknow"},{name: "harsh",age: 21,city: "Noida"}];

# Math Object
-> Properies         
   Math.PI -> It is used to give the value of pi.
   Eg: Math.PI; // 3.141592653...         
   Math.E -> It is used to return the value of the constant E.
   Eg: Math.E; //2.7182818284...

->Methods      
   Math.abs(n) -> It is used to return the absolute value of a number.
   Eg: Math.abs(12); //12 
       Math.abs(-12); //12             
   Math.pow(a,b) -> It is used to calculate the power of a number.
   Eg: Math.pow(2,3); //8               
   Math.floor(n) -> This is used to roundoff the value to the nearest smallest integer value.
   Eg: Math.floor(5.5); //5
       Math.floor(5.999); //5
   Math.ceil(n) -> This is used to roundoff the value to the largest nearest integer value.
   Eg: Math.ceil(5.9); //6  
   Math.random() -> It is used to return the random number between 0 & 1 (where 1 is exclusive it is not included).
   Eg: Math.random(); //generates Random number 

   # Random Integers 
   -> From 1 to 10
   step1: let num = Math.random();
   step2: num = num*10;
   step3: num = Math.floor(num);
   step4: num = num+1;            

# Functions
-> A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output.
-> Function definition (telling JS)
Syntax: function funcName(){
    //do something
}
Eg: function hello(){
    console.log('Hello');
}
-> Function Calling (Using the function)
syntax: funcName(); 
Eg: hello();

# Functions with arguments
-> Values we pass to the function 
Syntax: function funcName(arg1,arg2,..){
    //do something
}
-> Value should be passed orderwise. It means that if we have given the name in the first argument then we should pass name as first argument . 

# return
-> It is a keyword used to return some value from the function.
-> input---->   function    ------> output
             (does some work)
-> Syntax: function funcName(arg1,arg2,..){
    //do something
     return value;
}
-> return ke baad ki koi bhi line function me xecute nahi hogi.
Eg: function sum(a,b){
    console.log("Hello");
    console.log("Hello");
    return a+b;
    console.log("Hello2");
    console.log("Hello2");
}
// Hello2 will not be printed as it is coming after return 

# Scope
-> Scope determines the accessibility of variables ,objects and functions from different parts of the code.
1. Function
-> Variables defined inside a function are not accessible(visible) from outside the function.
Eg: function sum(a,b){
    let sum = a+b;
}
// here variable sum can only be used inside the sum function . It can't be accessed outside the sum()

2. Block
-> Variables declared inside a { } block cannot be accessed from outside the block.
-> Block scope applies on let and const variables only.
Eg: {
    let a=25; //Block scope 
    console.log(a); // This variable can be accessed only inside this block
}

3. Lexical
-> A variable defined outside a function can be accessible inside another function defined after the variable declaration.
-> The opposite is not true.
Eg: function outterFunc(){
    let x= 5;// lexical scope
    let y =6;
    console.log(x,y);
    function innerFunc(){
        console.log(x);
    }
    innerFunc();
}

# Function Expressions 
-> Another way of writing function.
-> These functions are nameless functions.
-> const variable = function(arg1,arg2,..){
    //do something /return something 
}
Eg: const sum = function(a,b){
    return a+b;
}
sum(2,4);

# High order functions 
-> A function that does one or both:
   -> takes one or multiple functions as arguments 
   Eg: function multipleGreet( func,n){
            for(let i=1;i<=n;i++){
                func();
            }
   }
   let greet = function(){
    console.log("Hello");
   }
   multipleGreet(greet,2);
   // Whenever we pass a function we pass function name only brackets are not passed because we only need to send the function definition not it's calling.

   -> returns a function 
   Eg: function oddEvenTest(request){ // Factory function : Fun that creates new function
          if(request == "odd"){
            return function(n){
                console.log(!(n%2==0));
            }
          }
          else if(request == "even"){
            return function(n){
                console.log(n%2==0);
            }
          }
          else{
            console.log("Wrong request");
          }
   }

# Methods 
-> Actions that can be performed on an object.
Eg: const calculator ={
    add: function(a,b){
        return a+b;
    },
    sub: function(a,b){
        return a-b;
    },
    mul: function(a,b){
        return a*b;
    }
};

# Methods Shorthand 
-> const calculator ={
    add(a,b){
        return a+b;
    },
    sub(a,b){
        return a-b;
    }
}

# this keyword 
-> "this" keyword refers to an object that is executing the current piece of code.
Eg: const student = {
    name: "Suraj",
    age: 20,
    eng: 95,
    math: 99,
    physics: 84,
    getAvg(){
        let avg = (this.eng + this.math + this.phy) / 3;
        console.log(avg);
    }
}
// here if we want to access the property of student object inside the student object then we need to use this keyword.

 function getAvg(){
    console.log(this);
 }
 // Here we will get the window object
 -> The value of this is by default is window object in general cases.
 
# What is window object?
-> Whenever we run a js code then the window object is created to create the browser window .
-> Object at higher level on tab is window object.All of our code comes in this window object.

# try and catch 
-> The try statement allows you to define a block of code to be tested for errors while it is being executed .
-> The catch statement allows you to define a block of code to be executed , if an error occurs in the try block.
Eg: try{
    console.log(a);
}
catch {
    console.log("Variable a doesn't exist);
}
// If an error occurs in try block then the catch block will be executed else the try block will be executed.

// Miscellaneous topics //

# Arrow functions
-> Arrow functions can be passed as a value to a variable.
-> Syntax:
const func = (arg1, arg2..) => {function definition}
Eg: const sum = (a,b) => {
    console.log(a+b);
};
-> When there is a single argument then we can remove the parenthesis.
Eg: const cube = n =>{
    return n*n*n;
};
-> In case we don't have any argument then we will put empty braces.
Eg: const hello =() =>{
    console.log("Hello world!");
};

# Arrow function 
  # Implicit return 
  -> When there is only one work done by a function that is to return a value then we use this.
  -> const func = (arg1,arg2..) => (value)  
  Eg: const mul = (a,b) => (a*b);
  //We don't have to write any terminator or return keyword in the function .

# Set timeout
-> It is an inbuilt function of the window object.
-> Syntax: setTimeout(function,timeout);
Eg: console.log("hi there!");
setTimeout( ()=>{
    console.log("Apna college");//This function will be executed after 4s
},4000);
console.log("Welcome to");
-> The function is the function that is to be executed after the timeout. Timeout is the timer after this timer the fuction should be executed.
-> Timeout passes time in millisecond .
-> So for 1s we have to pass 1000 because 1000ms =1s
-> We usually use it for API calls and req response.

# Set Interval
-> Syntax: setInterval(function, timeout in ms);
Eg: setInterval( () => {
    console.log("Apna Desh");
},2000);
-> set interval will wait for time interval and keep on executing the funtion after that interval of time.
-> Each interval call has a unique id.
Eg: let id = setInterval( () => {
    console.log("Apna Desh");
},2000);
-> To stop it from executing we can pass 
clearInterval( id );
// This will stop the execution of interval whose id is passed in clearInterval(id).

# this with arrow functions 
-> In arrow function "this" has lexical scope and in normal function "this" has scope as calling object.
-> Arrow function has scope same as the scope of the parent.(jo scope uske parent ka hoga whi scope arrow function ka bhi hoga.)
Eg: const student = {
    name: "aman", //global scope 
    marks: 95,
    prop: this,
    getName: function () {
        return this.name;
    },
    getMarks: () => { //parent's scope -> window obj
        return this.marks;
    },
    getInfo1: function () {
        setTimeout( () => {
            console.log(this);// student obj
        }, 2000);
    },
    getInfo2: function (){
        setTimeout(function () {
            console.log(this);// window object
        }, 2000);
    }
};
const a = 5;// global scope
// for prop "this" keyword has a global scope hence window object and for getName() "this" keyword scope will be student object.
// For getMarks() as it is an arrow function so its scope will be it's parents scope i.e, global scope hence window object.

# Array Methods
  # forEach
  -> Syntax: arr.forEach(some funtion definition or name);//The function inside this will run for each element of array.
  Eg: let arr = [1,2,3,4,5];
      function print(el){
        console.log(el);
      }
      arr.forEach(print);
           // OR
      arr.forEach(function(el){
        console.log(el);
      });
      
  # map
  -> Apply some function on each element of array and the value returned is stored in new array whose size is same as orignal array.
  -> Syntax: let newArr = arr.map(some function definition or name);
  Eg: let num =[1,2,3,4];
      let double = num.map(function(el){
        return el*2;
      });

  # filter
  -> It check the filter condition and filter the array according to it and create a new array of same size.
  -> If value is true then that element will be added to the new array else it will not be added.
  -> Syntax: let newArr = arr.filter(some function defintion or name);
  Eg: let nums = [2,4,1,5,6,2,7,8,9];
      let even = nums.filter( (nums) =>(nums % 2 == 0) ); //even -> true, odd -> false

  # some
  --> Returns true if some elements of array give true for some functions. Else returns false.
  -> Synatx: arr.some(some function definiton or name);
  Eg: [1,2,3,4].some( (el) => (el%2==0) ); //true
      [1,3].some( (el) => (el%2==0) ); //false

  # every 
  -> Returns true if every element of array gives true for some function .Else returns false.
  -> Syntax: arr.every(some function definition or name);
  Eg: [1,2,3,4].every( (el) => (el%2==0) ); //false
      [2,4].every( (el) => (el%2==0) ); //true

  # reduce 
  -> Reduces the arra;y to a single value 
  -> Syntax: arr.reducer (reducer function with 2 variables for (accumulator, element));
  Eg: [1,2,3,4].reduce( (res,el) => (res+el) ); 

# Default parameters
-> Giving a default value to the arguments
Eg: function func(a,b=2){
    //do something 
}
 function sum (a, b=3){
    return a+b;
 }
 // Here if we dont pass the value of b then its default value will be used.

# Spread
-> Expands an iterable into multiple values.
-> Syntax: function func(...arr){
    //do something 
}
Eg: let arr = [1,2,3,4,5];
    Math.min(...arr);
// We don't have to pass the values seperately we just have to write ...arr and this will pass all the values of the array individually .

# Spread with array Literals
-> let arr = [1,2,3,4,5];
   let newArr = [...arr]; // [1,2,3,4,5]

   let chars = [..."hello"]; //['h','e','l','l','o']

# Spread with object literals 
-> Eg: let data ={
    email: "abc123@gmail.com",
    password: "xyaw",
};
let dataCopy = { ...data,id: 123 };
// Output //
dataCopy = {
    email: "abc123@gmail.com",
    password: "xyaw",
    id: 123 ,
}
-> We can also spread arrays and string in object literals
Eg: let ar =[1,2,3,4,5];
    let obj1 = { ...ar };
    // OUTPUT //
    obj1 ={
        0: 1,
        1: 2,
        2: 3,
        3: 4,
        4: 5,
    }
Eg2: let obj2= { ..."hello" };
    // OUTPUT //
    obj2 ={
        0: 'h',
        1: 'e',
        2: 'e',
        3: 'l',
        4: 'l',
        5: 'o'
    }
-> In case of array and string the index becomes the key and the element becomes the pair in this way the key: value pair is maintained.

# Rest 
-> Allows a function to take an indefinite number of arguments and bundle them in an array.
Eg: function sum (...args){
    return args.reduce((add,el) => add+el);
}

# In js there is by default a variable(arguments) that stores all the arguments that we pass in it.
Eg: function min (a,b,c,d){
    console.log(arguments); //This variable stores all the value of the arguments used in this function.
}
// values that are used during the function call are stored in the this arguments variable.

# Destructuring
-> Storing values of array into multiple variables
Eg: let name = ["tony","bruce","steve","peter"];
let [winner, runnerup] =names;
console.log(winner, runnerup); //"tony" "bruce"

# Destructuring in objects
-> const student = {
    name: "Suraj",
    class: 9,
    age: 14,
    subjects: ["hindi","english","math","science","social studies"],
    username: "suraj124",
    password: 12345,
};
const { username: user , password: pass, city: place = "Lucknow" } = student;
console.log(user); //suraj124
// here user and pass are the new names of the object keys username and password we can access it using this names.
// we can also define a defaullt value for a variable like city we have given it default value as lucknow.

# DOM (Document object model)
-> The DOM represents a document with a logical tree.
-> It allows us to manipulate/change webpage content (HTML Elements).

# DOM (Document Object Model)
EG: <body>
       <div>
          <h1>Todo</h1>
       </div>
       <ul>
           <li>Eat</li>
           <li>Code</li>
           <li>Sleep</li>
       </ul>
    </body>
// View its flow chat in DOM.png //

# console.dir(document.all);
-> This is used to return the HTMLAllCollection and HTMLAllCollection contains all the html elements that are present on the webpage.
-> We can select the element using index and we can select that element and apply changes to it.

# Selecting Elements
   1. getElementById
   ->Returns the element as an object or null (if not found).
   Syntax: document.getElementById("idName");
   // The element with the id as "id" will be selected. //
   -> This value can be stored in a varible and can be used to apply changes in it.
   Eg: let imgObj = document.getElementById("mainImg");
   console.log(imgObj);

   2. getElementsByClassName
   -> Returns the elements as an HTML collection or empty collection (if not found).
   Syntax: getElementByClassName("className");
   Eg: document.getElementsByClassName("oldImg");
   -> If we try to select a class which is not used then this will return the empty HTMLCollection.

   3. getElementByTagName
   -> Returns the elements as an HTML collection or empty collection (if not found).
   Syntax: document.getElementByTagName("p");
   // This will select all the paragraph(<p>) tag present in the page .
   -> If we try to select a tag which is not used in the creation of HTML page then we will get an empty HTMLCollection.

# Query Selectors
-> Allows us to use any CSS selector.
Eg: 1. document.querySelector('p'); //Selects first p element
2. document.querySelector('#myId'); //Selects first element with id = myId
3. document.querySelector('.myClass'); //Selects first element with class = myClass
4. document.querySelectorAll("p"); // Selects all p elements

# Using properties & Methods
-> innerText
   -> Shows the visible text contained in a node.
   Eg: document.querySelector("p").innerText = "abcd";

-> textContent
   -> Shows all the full text.
   Eg: document.querySelector("p").textContent =

-> innerHTML
   -> Shows the full markup.
   Eg: document.querySelector("p").innerHtml = "Hi, I am <b> Deepak Yadav </b>.";

# Manupulating Attributes 
Syntax: obj.getAttribute(attr);
        obj.setAttribute(attr,val);
-> These are also known as getters and setters .
-> Getters & setters are used to get the value and set the value.

# Manipulating style 
-> To manipulate style using DOM we need to know that the styles can be edited using camel case in js
Eg: In CSS: background-color 
    In JS: backgroundColor

   1. style Property : Using this all the style changes are applied as inline style none of these changes are applied as  
   -> Syntax: obj.style //This will tell us about the style of the object.
   -> obj.style.color = 'green'; this will set the color of the object as green.
   
   2. using classList
   -> Syntax: obj.classList : This will show all the classes that are applied on the object.
   Eg: obj.classList.add(): to add new classes
       newDiv.classList.add('divbox');
       obj.classList.remove(): to remove classes 
       newDiv.classList.remove('divbox');
       obj.classList.contains(): to check if class exists. Gives value in true or false form.
       newDiv.classList.contains('divbox');
       obj.classList.toggle(): to toggele between add & remove. If the class is added then it will be removed if it was removed then it will be added.
    
    //We can also use setAttribute for this but setAttribute can apply only 1 property of the class to the HTML element.

# Navigation
   1. parentElement
   -> This will tell us about the parent element of the element which use this method.
   Syntax: obj.parentElement;
   Eg: let h4 = document.querySelector('h4');
       h4.parentElement; // This will return the parent element of h4.

   2. children
   -> This will return the child elements .
   Syntax: obj.children;
   Eg: h4.children; // This will return the children of h4

   3. previousElementSibiling / nextElementSibiling
   -> We can acces childrens using indexes or we can also use previousElementSibling and the nextElementSibiling
   Syntax: obj.previousElementSibling;
           obj.nextElementSibling;

   # childElementCount
   -> This will return the count of the child elemnts present .
   Syntax: obj.childElementCount;

# Adding Elements
-> To add a new element first we need to create a new element and then we will append it.
-> document.createElement('p')
   -> This is used to create a new element.
   Eg: let newP = document.createElement('p');

-> appendChild(element)
   -> To use this first we have to select the parent then we can appendChild in it.
   Eg: let body = document.querySelector('body');
       body.appendChild(newP);

-> append(element)
   -> Using this we can append element, string or new text.
   Eg: body.append(newP); 
      newP.append("this is new text");

-> prepend(element)
   -> Append and prepend are same the only difference is that prepend will add the element in the start.
   Eg: body.prepend(newP); //This will add the element in the start of the body .

-> insertAdjacent(position, element)
   -> Using this we can decide that where we want to add the element and what we want to add .
  
   # position
   -> A string representing the position relative to the targetElement; must match (case-insensitively) one of the following strings:

   -> 'beforebegin': Before the targetElement itself.
   -> 'afterbegin': Just inside the targetElement, before its first child.
   -> 'beforeend': Just inside the targetElement, after its last child.
   -> 'afterend': After the targetElement itself.
   
   # element
   -> The element to be inserted into the tree.

   Eg: let btn = document.createElement('button');
       btn.innerHTML = "New button";
       let p = document.querySelector('p');
       console.log(btn);
       console.log(p);
       p.insertAdjacentElement('beforebegin', btn); //This will add the button before the paragraph starts.
       p.insertAdjacentElement('afterbegin', btn); //This will add the element after the paragraph starts.At the start in the paragraph
       p.insertAdjacentElement('beforeend', btn); //This will add the element before the paragraph end at the end in the paragraph
       p.insertAdjacentElement('afterend', btn); //This will add the element after the paragraph ends.

# Removing Elements
-> To remove any element we use this method.

-> removeChild(element);
   -> It works exactly like appendChild.
   Eg: let body = document.querySelector('body');
       body.removeChild('btn');

-> remove(element);
   -> This works exactly like append.
   Eg: body.remove('btn');

# DOM Events 
-> Events are signals that something has occurred .(user inputs/actions)
   
   # onclick(when an element is clicked)
   Eg: let btn = document.querySelector('button');
       console.dir(btn);
       btn.onclick = function (){
          console.log("Button was clicked");
        };

   # onmouseenter(when mouse enters an element)
   Eg: btn.onmouseenter = function() {
        console.log("you entered a button");
    };

# inline event listener
-> Syntax: event="js code /action" 
Eg: <button onclick="console.log('button was clicked')">click me</button>
-> It is not used mostly .

# Event listener
-> If we want to execute multiple functions when an event occurs then we need to use Event listeners.
-> addEventListener
   -> Syntax: element.addEventListener(event,callback)
   Eg: btn.addEventListener("click",function(){
    console.log("Button was clicked");
   })
   -> There are various events that can be added using this method. Learn more about it on mdn.

# this in Event listeners
-> When 'this' is used in a callback of event handler of something , it refers to that something.
Eg: let btn1 = document.querySelector("#btn1");
   btn1.addEventListener("click", function(){
    console.log(this.innerText);
   }); //it will return the button/btn1 obj.
-> We can also access the inner functions of button object.
-> 'this' can be usefull when we want to use single event listener on multiple objects.

# Note: The callback function n addEventListener has a default parameter as event.
-> This event argument has many properties inside it.

# Keyboard Events
-> keydown
   -> This event will occur when the key is pressed.
   Eg: let inp = document.querySelector("input");
inp.addEventListener("keydown",function(){
    console.log("Key was pressed");
});
-> keyup
   -> This event will occur when the key is released.
   Eg: let inp = document.querySelector("input");
inp.addEventListener("keyup",function(){
    console.log("Key was released");
});
-> We can track the key and code of the button pressed using the function's event argument.
-> Keyboard event has 2 useful properties
1. code: code return the particular code of the key.
Eg: code: 'Semicolon'

2. key: key has the actual value of the key that is pressed and displayed on the screen.
Eg: key: ';'

# Form Events 
-> event.preventDefault: When we want to prevent the default action an element then we use this.It will prevent it from that default action 
Eg:  event.preventDefault();

# Extracting form data 
-> To get the data from the form or input tag we use obj.value this will return the value entered by the user.
Eg:let inp = document.querySelector("input");
    console.dir(inp.value);
-> We can also access elements using the form object itself.
-> formObj.elements; // this will contain the collection of all the form elements.
->formObj.elements[0]; //return the 0th element means first element of the form.

# More Events
-> change event 
   -> The change event occurs when the value of an element has been changed ( only works on <input>,<textarea> and <select> elements).
   Eg: user.addEventListener("change", function(){
    console.log("Change Event");
    console.log("Final value :",user.value);
    }); // change tracks the changes between final and initial stage.


-> input event
   -> The input event fires when the value of an <input>,<select> or <textarea> element has been changed.
   -> Note: only character keys trigger the input event non character keys such as shift ctrl etc don't trigger them.
   Eg: user.addEventListener("input", function(){
    console.log("Input event");
    console.log("Final value :",user.value);
   }); //input event tracks the small changes as we enter letter it will track the changes

# Event Bubbling
-> When create event listeners for nested html elements then event bubbling occurs. 
-> When we click on an element it triggers its event its parents and upper level events as well this phenomenon is called as event bubbling .
Eg: let div = document.querySelector("#box");
    let ul = document.querySelector("ul");
    let lis = document.querySelectorAll("li");

    div.addEventListener("click",function(){
        console.log("div was clicked");
    });

    ul.addEventListener("click", function(){
        console.log("ul was clicked");
    });

    for (li of lis){
        li.addEventListener("click", function(){
            console.log("li was clicked");
        });
    }
    // When we click on div we get div was clicked 
    // When we click on ul we get div was clicked and ul was clicked.
    // When we click on li we get li was clicked ul was clicked div was clicked.
    // When we click on an element it triggers its event its parents and upper level events as well this phenomenon is called as evnet bubbling .
-> To stop this event bubbling we can use the event object method named stopPropagation().
Eg:  ul.addEventListener("click", function(event){
        event.stopPropagation();
        console.log("ul was clicked");
    });

# Event Delegation
-> When we have added a new element on the page and the event listeners were already created for them but those same event listeners doesn't apply on this new created element and if we want that same event listeners get applied to the new created element then we use event delegation.
-> Event delegation is a type of programming in which we use event bubbling.
-> If we want any event listener to be added on the new child element then we create the same event listener for its parent element as well so that when the new child element will be created then because of the event bubbling the parents event will be applied to its child itself. 

# event.target 
-> It tells us what is  responsible for activating the event .
Eg: ul.addEventListener("click",function(event){
    console.log(event.target);
    console.log("Button was clicked");
});  
// event.target.nodeName : this used to tell us about the node that triggers that event.

# ADVANCED JAVASCRIPT CONCEPTS

# Call stack
-> It is basically a DS that finds out which function is getting executed at the moment and it also has the info of how the function were called ( order of function call ).
-> Eg: function hello(){
    console.log("Hello");
}

function demo(){
    hello();
}

demo();
-> Function calls are stored in stack it means that the function that enters last in it will be executed first.
-> As we call demo the function call of demo will be stored in the call stack then demo function is calling hello() so hello functions call will be stored in call stack.
-> Then first hello function will be executed because it entered last and then demo() will be executed. 

# Breakpoints
-> We can track the call stack of js through browser using breakpoints. 
-> It is generally used for debugging.
-> To add a breakpoint inspect<sources<app.js
-> Then to add breakpoint we just need to click on the line on which we want to add breakpoint.
-> We can use the arrow buttons that are present on the page to see the next function call. This way we can find errors easily.

# JS is single threaded
-> JS is a single threaded language. Only one thing of a code can be executed at a particular interval of time.
-> To deal with this single threaded nature of js there are several things in js .
Eg: callbacks
    setTimeout: Eg: setTimeout(function(){
        console.log("Apna College");
    },2000);
    console.log("hello ...");
    // Program will not wait for setTimeout to execute its function it will execute next statement first then after 2sec "Apna College" will be printed.
    // You might be thinking when js has a single threaded nature then how is it doing two work at same time waiting and executing the "hello" this is because the waiting work is done by browser it is not the work of js.
    // As the waiting time ends browser adds the setTimeout function into the call stack and those functions will be executed.
    // When we use functions like setTimeout in our code we make our js code asynchronous.
-> Even though js is a single threaded language it has asynchronous nature.

# Callback Hell
-> Due to the asynchronous nature of js the first problem that comes is known as callback hell.
Eg:  let h1 = document.querySelector("h1");

function changeColor(color,delay,nextColorChange){
    setTimeout(()=>{
        h1.style.color = color;
       if(nextColorChange) nextColorChange();
    },delay);
    
}


changeColor("red",1000,()=>{
    changeColor("orange",1000,()=>{
        changeColor("green",1000);
    });
});
// Here the callback nesting is taking place this nesting of callbacks is known as callback hell.
-> To save us from the callback hell we use promises and async and await keywords about which we will learn further.

# Promises 
-> The promises object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
-> Promise object has resolve and reject  callbacks where resolve is for success callback and reject is for failure callback.
-> For any Promise we have multiple states:
    -> pending: In this state we dont know if the promise if fulfilled or rejected .
    -> rejected: In this state the promise was rejected it was not fulfilled.
    -> fulfilled: In this state the promise has been fulfilled successfully.
-> Promises also have two methods :
   -> then() : if we want to execute anything after the promise has been fulfilled then we use .then()
   -> catch() : if we want to execute anything if the promise has been rejected then we use .catch()
   Eg: let request= savetoDB("Hello Love"); // request is Promise object
      request.then(()=>{
          console.log("Promise was resolved");
        })
        .catch(()=>{
           console.log("Promise was rejected");
        });
// ANOTHER WAY TO USE IT //
savetoDB("Hello Love") 
.then(()=>{
    console.log(request);
})
.catch(()=>{
    console.log(request);
});

# Promise chaining 
-> When we group various then() together it is called as promise chaining.
Eg: savetoDB("Hello Love") 
.then(()=>{
    console.log("DaTA 1 SAVED");
    return savetoDB("Hello master");
})
.then(()=>{
    console.log("Data 2 saved");
})
.catch(()=>{
    console.log("Rejected");
}); // This catch can be used for both data1 and data2 .
-> We dont need mutiple catch statement single catch statement can be used to catch all the errors.

# Results and Errors in Promises
-> Promises are rejected and resolved with some data(valid results or errors).
-> We can put result argument in then() method which will store the result of the promise.
-> We can use error argument in catch() method which will stored the error of promise.
-> Result will return the value of resolve and error will return the value of reject.
Eg: savetoDB("Hello Love") 
.then((result)=>{
    console.log("DaTA 1 SAVED");
    console.log(result);
    return savetoDB("Hello master");
})
.then((result)=>{
    console.log("Data 2 saved");
    console.log(result);
})
.catch((error)=>{
    console.log("Rejected");
    console.log(error);
});

# Async Functions (app12.js)
  # async & await keywords 

  # Async Keyword
  -> Async keyword creates an async function 
  -> Async functions by default returns a promise.
  Eg: async function greet(){
    return "Hello world"; //returns a promise
  }
  -> Creating an arrow function as async function.
    Eg: let hello = async() => {}; // returns a promise
  -> When the function is executed normally then it returns a promise state as fulfilled and the return value of the function is stored in PromiseResult.
  -> When the fucntion not executed normally an error has been occurred then it will return the  promise with PromiseState as rejected and PromiseResult as error value.
  // We can use the throw keyword to define the value that will be returned when an error has occurred.
  Eg: throw "Some random error";
  -> We can use then() & catch() method on the async functions as it returns promise.

  # Await Keyword
  -> Pauses the execution of its surrounding async function until the promise is settled (resolved / rejected).
  Eg: async function show(){
    await colorChnage("voilet",1000);
    await colorChnage("indigo",1000);
    await colorChnage("green",1000);
    await colorChnage("yellow",1000);
    await colorChnage("orange",1000);

    return "done";
  }

  # Handling rejections with Await
  -> We need to put all the code that might throw an error in the try and then it will catch the error but the exection of the code that is not dependent on try block code  will not be affected by the error.
  Eg: async function demo(){

    try{
        await changeColor("red",1000);
        await changeColor("orange",1000);
        await changeColor("green",1000);
        await changeColor("blue",1000);
    }
    catch(err){
        console.log("Error caught");
        console.log(err);
    }
    

    let a=5;
    console.log(a);
    console.log("New number: ",a + 3);
}
// This will catch the error and return it but it will not stop the execution of the code that is not dependent on promise.


# API 
-> It stands for application programming interface.
-> It acts as a means of communication between two software.
-> The API's the uses http protocols for the communication is called as web API's.
-> As a response API returns data that is in JSON format.
-> API url is known as endpoint sometimes it is normal or sometime it will be with key or paid .
-> For using API sometimes we might need key (key is given to us by the owner when we login to the site.)
-> Some of the API might be paid we have to pay to use it. 

-> Some random API's 
   -> https://catfact.ninja/fact (sends random cat facts)
   -> https://www.boredapi.com/api/activity (sends an activity to do when bored)
   -> https://dog.ceo/api/breeds/image/random (sends cute dog pictures)

-> To use API first read its documentation then use it.

# JSON 
-> JavaScript Object Notation  www.json.org 
Eg:  {
    "string" : "Hi",
    "number" : 25,
    "boolean" : true,
    "object" : {"name": "Suraj", "age": 24},
    "array" : ["Hello",5,false,{"key": "value", "number": 6}]
}
-> We have various online json validator that tells us if the json data is right or not.
-> Undefined values are not allowed in JSON format.

# Accessing data from JSON 
-> We get data in json format in form of string.
Eg: let jsonRes = '{"fact":"When a domestic cat goes after mice, about 1 pounce in 3 results in a catch.","length":76}';
-> JSON.parse( data ) Method 
   -> To parse a string data into a JS object
   Eg: let validRes = JSON.parse(jsonRes); // Converts the data from string format to JS object format.

-> JSON.STRINGIFY( json ) Method 
   -> To parse a JS object data into JSON
   Eg: let student ={
    name: "Viper",
    marks: 99,
}; //To convert it in JSON format 

let jsonFormat = JSON.stringify(student);
console.log(jsonFormat);

# Testing API requests
* TOOLS 
  -> Hoppscotch
  -> Postman

# How to use Hoppscotch 
-> Select an appropriate method GET,PUT,POST,PATCH etc.
-> Copy and paste the url in the url section thne click on sent button.
-> We will get the response in the response window.

# Ajax 
-> It stands for Asynchronous JavaScript and XML 
-> The process of sending request and getting response is an asynchronous process.
-> The process of request and response is known as Ajax calls.

# HTTP Verbs 
-> Example: 
   -> GET : When we get info from the API then we use GET req .
   -> POST : When we want to post something then we use POST req.
   -> DELETE : When we want to delete something then we use DELETE .


# Status codes 
-> Example: 
   -> 200 - OK 
   -> 404 - Not found 
   -> 400 - Bad request 
   -> 500 - Internal server error

# Add information in URLs
* Query Strings 
-> When we want to send the additional information with the url we use query strings .
-> https://www.google.com/search?q=harry+porter 
// Here q is key and  harry+porter is value.
-> ?name=shraddha&marks=95
 
* Variable
-> We can also pass the full route of the data / or by passing the variable.
Eg: https://api.potterdb.com/v1/movies/1483090c-1513-4bf1-83c6-cc00130f4305
//Here after movies this part is "id" : 1483090c-1513-4bf1-83c6-cc00130f4305

* Http Headers
-> Headers are used to supply the additional information in bothj request and response.
-> To set headers we can go to the headers section there we can add header to access data.
Eg: https://icanhazdadjoke.com/ 
// This API has Accept header that can be used to get data in different formats by default it sends data in html format .
// If we want to get data in JSON Format we can add header as Accept & value as application/json then we can get the data in json format.
-> Generally we send meta data(data about data) with headers.

# Our first request 
* using fetch 
-> fetch() returns a promise in form of response. So we can use promise methods with fetch.
Eg: let url = "https://catfact.ninja/fact";

fetch(url)
.then((res)=>{
    console.log(res);
    return res.json(); //parsing data into json format
})
.then((data)=>{
    console.log(data.fact);
})
.catch((err)=>{
    console.log("Error :",err);
});
// Here first we have used fetch(URL) then we get a promise to get the data first we parse it into json fomat and then we used promise chaining .

# Using fetch with async and await 
-> async function getFacts(){
    try{
        let res = await fetch(url);
        let data = await res.json();
        console.log(data);
    }
    catch(e){
        console.log("Error: ",e);
    }
}

# Axios 
-> Library to make HTTP requests
-> To use it copy the cdn link from axios github page and then use it. Paste it in html folder before app.js .
-> Why we need to use axios when we have fetch in fetch the data comes in readable format an we have to convert/parse it to json format but in axios we don't need to convert/parse the data 
Eg: async function getFacts(){
    try{
        let res = await axios.get(url);
        console.log(res);
    }catch(e){
        console.log("Error :", e);
    }
}

# Sending headers with API requests
-> To pass data we create an object with key as headers and value as an object with key as headerName and value .
-> To pass it with API req we will pass it as a 2nd argument with the API request.
-> Example:
let url3 = "https://icanhazdadjoke.com/";
async function getJokes(){
    try{
        const config ={headers: {Accept: "application/json"} };
        let res = await axios.get(url3,config);
        console.log(res.data.joke);
    }catch(e){
        console.log("Error: ", e);
    }
}

# Updating Query Strings