//        BACKEND DEVELOPMENT       //
# Node.js 
-> JavaScript Runtime Environment 
-> It is used for server side programming .
-> Node.js is not a language , library or framework.
Eg: VS Code is built on Node.js. 

# Node REPL (Read Eval Print Loop)
-> As soon as we enter the node  we enter into the js runtime environment where all the terminal commands will not work but all the js commands will run in it .
-> .help gives us commands 

# Node Files 
# How to run JS files using Node?
-> Firstly we have to cd into the folder in which the JS file is present.
-> node fileName.js in terminal to execute js  file using node.

# Process 
-> Process: This object provides information about ,and control over , the current Node.js process. 

-> Process.argv: Returns an array containing the command-line arguments passed when the node.js process was launched.
-> When we dont pass any argument then process.argv returns an array with 2 values.
Eg: When node script.js was run in terminal 
Output: [
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Users\\deepa\\OneDrive\\Desktop\\MERN Stack\\Nodejs\\script.js'     
]
-> The first value  'C:\\Program Files\\nodejs\\node.exe' this is the executable path of the node.
-> The second value 'C:\\Users\\deepa\\OneDrive\\Desktop\\MERN Stack\\Nodejs\\script.js' this is the path of the file that we are running.

-> But when we pass argument with it Eg: node script.js hello bye // here hello and bye are argument passed when node.js process was launched
-> Output: [
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Users\\deepa\\OneDrive\\Desktop\\MERN Stack\\Nodejs\\script.js',
  'hello',
  'bye'
]

# module.exports 
-> requiring files 
-> require() - a built in function to include external modules that exist in separate files. 

-> module.exports - a special object that contains all the thing that the file wants to send to another files .

Note :
-> Using module.export we can export string number and file. 
-> when the file is not exporting anything and we require it then module.export will send an empty object.

Eg -: File Name : math.js 
const sum = (a,b) => a+b;
const mul = (a,b) => a*b;
const g = 9.8;
const PI = 3.14;
let obj = {
    sum: sum,
    mul: mul,
    g: g,
    PI: PI
};
module.exports = obj; //Here this file is exporting obj to other files.

File Name : script.js
const math = require("./math"); //by using require keyword we can require and use the value that we have exported in math.js in script.js

console.log(math.sum(2,2)); // We will get the value that we have exported in our math.js file as output.

-> We can also access the values of obj with (.) operator.

# There are generally two way to export 
1: we can export it by creating object and adding all the functions within it like we have done in above example.
2: we can directly import the function or value by writing export in front of it .
Eg: File Name: math.js 
module.export.sum = (a,b) => a+b;
module.exports.mul = (a,b) => a*b;
module.exports.g = 9.8;
module.exports.PI = 3.14;
-> We can simply access it by requiring it in the other module.
-> We can exculde writing module also then also it will work.
Eg: exports.sum = (a,b) => a+b;
    exports.mul = (a,b) => a*b;
