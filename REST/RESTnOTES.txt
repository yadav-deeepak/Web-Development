# REST 
-> Representational State Transfer 
-> REST is an architectural style that defines a set of constraints(rules) to be used for creating web services.

# RESTful API's 
-> API's that uses REST are known as RESTful API's.
-> We are going to use RESTful API's to perform CRUD(Create Read Update Delete) operations(DB).

# CRUD operations 
-> GET retrives resources. 
-> POST submits new data to the server.
-> PUT updates existing data.
-> PATCH updates the existing data partially 
-> DELETE removes data.

# Creating RESTful API's 
-> GET     /posts      to get data for all posts  INDEX(main route)
-> POST    /posts      to add a new post   CREATE route
-> GET     /posts/:id  to get one post (using id)  VIEW route 
-> PATCH   /posts/:id  to update specific post  UPDATE route 
-> DELETE  /posts/:id  to delete specific post  DESTROY route

# Implement : GET/posts
-> To get data for all posts 

# Implement : POST/posts 
-> POST    /posts      to add a new post   CREATE route
## 2 routes 
-> Serve the form  GET  /posts/new
-> Add the new post  POST  /posts 

# Implement : GET/posts/:id  (show route)
-> GET     /posts/:id  to get one post (using id)

# Implement: PATCH/post/:id 
-> PATCH   /posts/:id  to update specific post  UPDATE route 

# Create form for update (edit route)
-> serve the edit form   GET   /posts/:id/edit 

# Implement:  /posts/:id
Destroy route 
-> DELETE  /posts/:id   to delete specific post 

# Redirect 
-> To connect different pages we can use redirect.
-> Status code that starts with 3 means that response has redirected something.
-> res.redirect(URL);
// By default it will redirect with get request.

# Creating id for posts 
## UUID Package 
-> Universally unique identifier 
-> npm install uuid 
-> Using this package we can create new and unique id .

# method-override package
-> In HTML forms we can only send GET or POST req .
-> To solve this we use this npm package.