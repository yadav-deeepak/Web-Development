# Database : SQL 
-> MySQL is a database and SQL is the language used to interact with database.

# What is a Database?
-> It is a collection of data in format that can be easily accessed .

# Why databases?
-> can store large data .
-> features like security , scalability etc.
-> easier to insert , update or delete data.

# SQL v/s NoSQL 
## SQL 
-> Relational database (data stored in tables).
-> Eg: MySQL , Oracle , PostgreSQL etc.

## NoSQL 
-> Non Relational Database (data stored in document/key-val/graphs etc.)
-> Eg: MongoDB , Cassandra , Neo4j etc.

# SQL(Structured Query Language)
-> SQL is a programming language used to interact with relational databases.

# Tables in SQL 
-> Tables consist of rows and columns.
Eg:                  user 
id    name     email          followers    following
1     Adam    adam@yahoo.in    123          145
2     Bob     bob12@gmail.com  200          200
3     Casey   casey@gmail.com  300          306 
-> Columns tells us about the design/schema of the table. 
-> rows tells us about the data of one user .Also known as tuple . 

# Install MySQL  
-> Open it we will find the schema option .
-> Here we will get the sys database that is predefined. We dont have to do any changes to this data.
-> We will write all our major commands in the Query1 window and in the bottom we will get to know which command we have run and which command has been executed successfully.

# Our first database 
-> CREATE DATABASE db_name;
-> DROP DATABASE db_name;
-> USE db_name;
// SQL is not a case sensitive language we can write either in uppercase or lowercase.
// Write the command / query and then select it and run it using the second button on the top.
-> If we want to create the table in the DB then we have to first select the DB we write USE db_name;
-> Then we can create the table inside the database.

# Our first table 
-> CREATE TABLE table_name(
    column_name1 datatype constraint,column_name2 datatype constraint,column_name3 datatype constraint
);
// Used to create table 
-> INSERT INTO table_name VALUES (val1,val2),(val1,val2);
// Used to insert value into the table .
-> SELECT * FROM table_name;
// Used to view all the data in the table.

# DATABASE QUERIES 
-> CREATE DATABASE db_name;
-> CREATE DATABASE IF NOT EXISTS db_name;
-> DROP DATABASE db_name;
-> DROP DATABASE IF EXISTS db_name;
-> SHOW DATABASES;
-> SHOW TABLES;

# TABLE QUERIES 
 -> CREATE TABLE
    -> It is used to define the schema / columns of the table.
    -> CREATE TABLE table_name(
    column_name1 datatype constraint,column_name2 datatype constraint,column_name3 datatype constraint
);

 -> INSERT 
    -> INSERT INTO table_name (colname1 , colname2)
    VALUES
    (col1_v1,col2_v1),
    (col1_v2,col2_v2);

 -> UPDATE 
    -> Update(to update existing rows)
    Eg: UPDATE table_name 
        SET col1 = val1, col2 = val2 WHERE condition;
    -> When we run first time UPDATE command we might face an error to solve this error run
    SET SQL_SAFE_UPDATES = 0;
    // this will solve the error.

 -> ALTER 
    -> To change the schema 
    ## ADD column 
    -> ALTER TABLE table_name ADD COLUMN column_name datatype constraint;

    ## DROP column 
    -> ALTER TABLE table_name DROP COLUMN column_name;

    ## RENAME table 
    -> ALTER TABLE table_name RENAME TO new_table_name;

    ## CHANGE column(rename)
    -> ALTER TABLE table_name CHANGE COLUMN old_name new_name new_datatype new_constraint;

    ## MODIFY column(modify datatype/constraint)
    -> ALTER TABLE table_name MODIFY col_name new_datatype new_constraint; 

 -> TRUNCATE 
    -> To delete table's data 
    Eg: TRUNCATE TABLE table_name;
    
 -> DELETE 
    -> To delete existing rows 
    Eg: DELETE FROM table_name WHERE condition;
    // If we don't mention what we have to delete then it will delete all the data.

# Constraints 
-> Rules for data in the table 
## NOT NULL : columns cannot have a null value 
## UNIQUE : All the values in column are different 
## DEFAULT : sets the default value of a column.
## CHECK : it can limit the values allowed in a column .
Eg: salary INT DEFAULT 25000 
CONSTRAINT age_check CHECK (age >= 18 AND city = "DELHI")

## PRIMARY KEY 
-> Makes a column unique & not null but used only for one 
Eg: CREATE TABLE temp(
    id INT NOT NULL,
    PRIMARY KEY (id)
);
-> There are 2 ways through which we can declare the primary key .
1.> id INT PRIMARY KEY 
2.> PRIMARY KEY (id)

## FOREIGN KEY 
-> prevent actions that would destroy links between tables 
Eg: CREATE TABLE temp(
    cust_id INT,
    FOREIGN KEY (cust_id) references customer(id)
);

# Keys 
-> Keys are special columns in the table .

## Primary Key
-> It is a column (or set of columns) in a table that uniquely identifies each row .(a unique id). There is only 1 PK & is should be NOT NULL. 

## Foreign key 
-> A foreign key is a column (or set of columns) in a table that refers to the primary key in another table .
-> FKs can have duplicate & null values .
-> There can be multiple FKs.

# Select command 
-> Selects & show data from the DB.
Syntax: SELECT col1,col2 FROM table_name;

Syntax: SELECT * FROM table_name;
// To show all 

# WHERE clause 
-> To define some conditions
SELECT col1,col2 FROM table_name WHERE conditions;

## WHERE clause Operators
-> Arithmetic Operators : +(addition), -(subtraction), *(multiplication), /(division), %(modulus)
-> Comparison Operators : =(equal to), !=(not equal to), >, >=, <, <=
-> Bitwise Operators: &(bitwise AND), |(bitwise OR)
-> Logical Operator : AND, OR, NOT, IN, BBETWEEN, ALL, LIKE, ANY 
  -> AND: to check for both conditions to be true 
  -> OR: to check for one of the conditions to be true

  -> BETWEEN: selects for a given range 
  Eg: WHERE age BETWEEN 15 AND 17
  // 15 se 17 ke beech me jiski age hogi vo logo ka data return hojaayega.

  -> IN: matches any value in the list.
  Eg: SELECT name,email FROM user WHERE email IN ("adam@yahoo.in","viper@gmail.com","abc@gmail.com");
  // Returns name and email of the user whose emails are these 3 given emails.

  -> NOT: to negate the given condition.
  Eg: SELECT name,age FROM user WHERE age NOT IN (14,15);
  // jaha prr age 14/15 nahi hogi vo data print hojaayega.

# LIMIT clause 
-> Sets an upper limit on number of (tuples) rows to be returned.
Eg: SELECT col1,col2 FROM table_name LIMIT number;

# ORDER BY clause
-> To sort in ascending (ASC) or descending order (DESC)
Eg: SELECT col1,col2 FROM table_name ORDER BY col_name ASC;
-> If we don't write the order then by default it will sort in the ascending order.
// col_name ke basis prr ascending order me sort krdega

# Aggregate Functions
-> Aggregate functions perform a calculation on a set of values, and return a single value 
   # COUNT()
   # MAX()
   # MIN()
   # SUM()
   # AVG()
Eg: SELECT max(marks) FROM student;

# GROUP BY clause 
-> Groups rows that have the same values into summary rows.
-> It collects data from multiple records and groups the result by one or more column.
Eg: SELECT col1,col2 FROM table_name GROUP BY col_names;
** Generally we use group by with some aggregation function.

# Having clause 
-> Similar to WHERE i.e applies some condition on rows.
-> But it is used when we want to apply any condition after grouping. 
Eg: SELECT col1,col2 FROM table_name GROUP BY col_names
HAVING condition;
-> WHERE is for the table ,HAVING is for a group 
-> Grouping is necessary for HAVING 

# General order 
-> Whenever we want to write multiple clauses together its general format is given below.
SELECT columns
FROM table_name
WHERE condition 
GROUP BY columns
HAVING condition 
ORDER BY columns ASC;

# How to use databases in our backend?

# Faker Package
-> To generate fake data .
   userid   username   email   password 
Eg: let getUser = () => {
   return [
      faker.datatype.uuid(),
      faker.internet.username(),
      faker.internet.email(),
      faker.internet.password(),
   ];
};

# MySQL2 Package
-> To connect Node with MySQL.
-> First we require it and then we make connection.
Eg: // Get the client
const mysql = require('mysql2');

// Create the connection to database
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  database: 'delta_app',
  password: 'Deepak@32', // add the password that we have created on our mysql workbench to establish a connectin.
});
// using this connection object the connection will be build.Now using this connection we can perform the CRUD operations on our database.
// For that we will use query method.
// A simple SELECT query
connection.query(
  'SELECT * FROM `table` WHERE `name` = "Page" AND `age` > 45',
  function (err, results, fields) {
    console.log(results); // results contains rows returned by server
    console.log(fields); // fields contains extra meta data about results, if available
  }
);

connection.end(); // to close connection if we don't close the connection then it will not be closed .

# Using SQL From CLI 
-> /usr/local/mysql/bin/mysql -u root -p

# Using SQL files
Create schema.sql 
// To execute it open sql in CLI then write this command.
source schema.sql //in CLI

# 4 ways to use SQL 
-> Workbench 
-> MySQL Package 
-> CLI 
-> Using SQL files