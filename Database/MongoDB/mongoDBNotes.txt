# MongoDB 
-> It is the most popular database to pair with express.

# The Shell 
-> We can use mongo shell to run mongoDB in terminal.
-> mongosh  //to start 
-> use college  //to create & use a new database called "college".

# Mongo shell command 
-> Mongo shell is a type of js shell. It mean that just like js it can also execute js codes 
Eg: "abc".toUpperCase() // this will convert the string into upper case.
-> There are many more js commands that mongo recognises.
-> exit/quit : use to exit the mongoDB.
-> As we open the mongo shell it automatically creates temporary database named test>

## Mongo ke liye koi bhi database permanent tb bnta h jb hum ussme koi data store kr dete hai.
-> db : this command is use to know the current database.

# BSON Data 
-> Binary JSON :in mongoDB the data is stored in BSON format.
-> There were some of the issues in the JSON format that are solved by the BSON format.
# JSON 
  -> Text based data : parsing of text based data is difficult .
  -> Space inefficient
  -> Less datatypes
  -> Readability: Human & Machine
# BSON 
  -> It doesn't store data in text based format so it solves the problem of parsing text data.
  -> Space efficient 
  -> More datatypes
  -> Readability: Machine

// We pass the data in json format only but mongo converts it into the BSON format.

# Collections 
-> Document : Mongo stores data in form of documents (BSON data).
-> Collection : MongoDB stores documents in collections.

# INSERT in DB 
-> If a collection doesn't exist, MongoDB creates the collection when you first store data into that collection.
-> insertOne 
   db.collection.insertOne()   //Inserts a single document into a collection.
   Eg: db.student.insertOne( {name: "adam" , age: 20 , marks: 45} )
   show collections // shows all the collections of the database.
   db.students.insertOne({name: "adam",marks: 79})
   db.student.find() // Using this command we can see all the data of any collection.

// As we insert a document mongodb creates an objectid with key as insertedId for that document automatically.
Eg: {
  acknowledged: true,
  insertedId: ObjectId('663f4aaaa1fcff535846b799')
}

# In mongoDb there is no restriction of schema suppose we stored name age and marks for one student and we want to store name age marks and city for other student we can do it there is no restriction on the schema .

-> insertMany(array of documents) // Insertd multiple documents into the collection.
   db.student.insertMany([{name:"bob",marks:65},{name:"eve",city:"Mumbai"}])

# FIND in DB 
-> db.collection.find() //returns everything
// for specific queries 
   db.collection.find({key: value}) // returns everyone for whom the condition matches.It returns cursor(reference to orignal).
   db.collection.findOne({key: value}) //returns only the first document with whom the condition matches.It returns actual document.
-> We can also pass multiple key value pair 
Eg: db.student.find({city: "Delhi", marks: 76})

  # Query Operators 
  -> Find students where marks > 75
     db.student.find( {marks: {$gt: 75}} )
  
  -> Find students who live in Delhi or Mumbai 
     db.student.find( {city: {$in: ["Delhi", "Mumbai"]}} )
  
  -> Find students who scored > 75 or live in Delhi 
     db.student.find( {$or: [{marks: {$gt: 75}},{city: "Delhi"}]})

// Values are case sensitive we have to type the commands as it is .

# UPDATE in DB 
// updateOne 
   db.collection.updateOne()  : Updates at most a single document that match a specified filter even though multiple documents may match the specified filter .
   
   Syntax: db.collection.updateOne(<filter>,<update>,<options>)

   Eg : db.student.updateOne( {name:"adam"}, {$set: {marks: 99}} )

// updateMany 
   db.collection.updateMany()  : Update all documents that match a specified filter. 
   Eg: db.student.updateMany( {city: "Delhi"}, {$set: {city: "New Delhi"}} )

// replaceOne 
   db.collection.replaceOne()  : Replaces at most a single document that match a specified filter even though multiple documents may match the specified filter.
   Eg: db.student.replaceOne( {name: "bob"}, {name: "Deepak", marks: 87, state: "Uttar Pradesh"} )
   // this will replace the data where name is bob with the new data.

# UPDATE Operators 
  -> $addFields 
  -> $set
  -> $project 
  -> $unset 
  -> $replaceRoot
  -> $replaceWith 

# Nesting 
->  {
    _id: ObjectId('6641fa53e614b53d3746b79c'),
    name: 'Viper',
    performance: { marks: 88, grade: 'A' }
  }

   db.student.find( {"performance.marks": 88} )
   // this will find the student whose performance.marks is 88 . Write it inside braces "performance.marks"

# DELETE in DB 
  // deleteOne 
     db.collection.deleteOne(<filter>,<options>)
     Eg: db.student.deleteOne( {state: "Uttar Pradesh"} )
  
  // deleteMany 
     db.collection.deleteMany(<filter>,<options>)
     Eg: db.student.deleteMany( {city: "New Delhi"} )
     db.student.deleteMany( {} ) // This will delete all the data from the student database.

  // dropDatabase 
     db.dropDatabase() // This will delete the current data base.

# Mongoose 
-> A library that creates a connection between MongoDB & Node.js JavaScript Runtime Environment .
-> Its is an ODM (object data modelling) library.
// Installation 
   npm i mongoose

# Require and connect with database 
-> const mongoose = require('mongoose');
   
   main().then((res)=>{
    console.log("Connection successful");
})
.catch(err => console.log(err));

async function main() {
  await mongoose.connect('mongodb://127.0.0.1:27017/test');
}
// mongoose.connect returns a promise that is why we are using asyn and await here

# Schema (Overall structure)
-> Schema defines the shape of the documents within that collection.
const userSchema = new mongoose.Schema({
   name: String,
   email: String,
   age: Number,
});

# Models
-> Model in mongoose is a class with which we construct documents.
const User = mongoose.model("User", userSchema);
// In mongodb a collection will be created with name users .
// There are slight changes that are done to the name if we give the name as User it will make it as users . Capital letters are converted into small letters and if the name is in singular then it will be converted to plural .
// So we should always write the name of the collection carefull we should write it in singular only it will automatically be converted into plural format by mongodb.

# INSERT 
// inserting one 
const user1 = new User({ name: "Adam", email: "adam@yahoo.in", age: 43 });
const user2 = new User({ name: "Eve", email: "eve@google.com", age: 42 });
-> When you create a new document with the automatically added _id property, Mongoose creates a new _id of type ObjectId to your document.

user1.save() //to save in DB 
user2.save() //to save in DB 

# NODE REPL 
-> If we don't use save() then it will not be saved in the mongodb but new objects user1 and user2 are created we can see it in node REPL 
step 1: node  // to enter into node REPL 
step 2: .load file name 
      Eg: .load index.js  // this will load the content of index.js on the REPL 
step 3: user1  // type the obj name and we can see the data of that object in REPL .

// inserting multiple 
User.insertMany([
   { name: "Tony", email: "tony@gmail.com", age: 50 },
   { name: "Bruce", email: "bruce@gmail.com", age: 47 },
   { name: "Peter", email: "peter@gmail.com", age: 30 },
]).then((data) => {
   console.log(data);
});

# NOTE :
-> Mongoose uses Operation Buffering 
-> Mongoose lets you start using your models immediately, without waiting for mongoose to establish a connection to MongoDB.

# FIND 
-> Model.find() //returns a query object (thennable)
*Mongoose queries are not promises.But they have a .then()
User.find().then((data)=>{
   console.log(data);
});
User.find({ age: { $gt: 47 } }).then((data)=>{
   console.log(data);
});